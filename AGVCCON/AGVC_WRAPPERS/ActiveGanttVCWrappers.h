// ----------------------------------------------------------------------------------------
//                              COPYRIGHT NOTICE
// ----------------------------------------------------------------------------------------
//
// The Source Code Store LLC
// ACTIVEGANTT SCHEDULER COMPONENT FOR C++ - ActiveGanttVC
// ActiveX Control
// Copyright (c) 2002-2017 The Source Code Store LLC
//
// All Rights Reserved. No parts of this file may be reproduced, modified or transmitted 
// in any form or by any means without the written permission of the author.
//
// ----------------------------------------------------------------------------------------
#pragma once

namespace ActiveGanttVC
{

typedef enum GRE_IMAGEFORMAT
{
	IMF_BMP = 0,
	IMF_JPEG = 1,
	IMF_GIF = 2,
	IMF_TIFF = 3,
	IMF_PNG = 4
}GRE_IMAGEFORMAT;

typedef enum GRE_ARROWDIRECTION
{
	AWD_UP = 0,
	AWD_DOWN = 1,
	AWD_LEFT = 2,
	AWD_RIGHT = 3
}GRE_ARROWDIRECTION;

typedef enum GRE_LINEDRAWSTYLE
{
	LDS_SOLID = 0,
	LDS_DASH = 1,
	LDS_DOT = 2,
	LDS_DASHDOT = 3,
	LDS_DASHDOTDOT = 4
}GRE_LINEDRAWSTYLE;

typedef enum GRE_EDGETYPE
{
	ET_SUNKEN = 1,
	ET_RAISED = 2
}GRE_EDGETYPE;

typedef enum GRE_BUTTONSTYLE
{
	BT_NORMALWINDOWS = 0,
	BT_LIGHTWEIGHT = 1
}GRE_BUTTONSTYLE;

typedef enum GRE_COLORS
{
	CLR_ACTIVEBORDER = -2147483638,
	CLR_ACTIVECAPTION = -2147483646,
	CLR_ACTIVECAPTIONTEXT = -2147483639,
	CLR_APPWORKSPACE = -2147483636,
	CLR_CONTROL = -2147483633,
	CLR_CONTROLDARK = -2147483632,
	CLR_CONTROLDARKDARK = -2147483627,
	CLR_CONTROLLIGHT = -2147483626,
	CLR_CONTROLLIGHTLIGHT = -2147483628,
	CLR_CONTROLTEXT = -2147483630,
	CLR_DESKTOP = -2147483647,
	CLR_GRAYTEXT = -2147483631,
	CLR_HIGHLIGHT = -2147483635,
	CLR_HIGHLIGHTTEXT = -2147483634,
	CLR_HOTTRACK = -2147483635,
	CLR_INACTIVEBORDER = -2147483637,
	CLR_INACTIVECAPTION = -2147483645,
	CLR_INACTIVECAPTIONTEXT = -2147483629,
	CLR_INFO = -2147483624,
	CLR_INFOTEXT = -2147483625,
	CLR_MENU = -2147483644,
	CLR_MENUTEXT = -2147483641,
	CLR_SCROLLBAR = -214748364,
	CLR_WINDOW = -2147483643,
	CLR_WINDOWFRAME = -2147483642,
	CLR_WINDOWTEXT = -2147483640,
	CLR_TRANSPARENT = 16777215,
	CLR_ALICEBLUE = 16775408,
	CLR_ANTIQUEWHITE = 14150650,
	CLR_AQUA = 16776960,
	CLR_AQUAMARINE = 13959039,
	CLR_AZURE = 16777200,
	CLR_BEIGE = 14480885,
	CLR_BISQUE = 12903679,
	CLR_BLACK = 0,
	CLR_BLANCHEDALMOND = 13495295,
	CLR_BLUE = 16711680,
	CLR_BLUEVIOLET = 14822282,
	CLR_BROWN = 2763429,
	CLR_BURLYWOOD = 8894686,
	CLR_CADETBLUE = 10526303,
	CLR_CHARTREUSE = 65407,
	CLR_CHOCOLATE = 1993170,
	CLR_CORAL = 5275647,
	CLR_CORNFLOWERBLUE = 15570276,
	CLR_CORNSILK = 14481663,
	CLR_CRIMSON = 3937500,
	CLR_CYAN = 16776960,
	CLR_DARKBLUE = 9109504,
	CLR_DARKCYAN = 9145088,
	CLR_DARKGOLDENROD = 755384,
	CLR_DARKGRAY = 11119017,
	CLR_DARKGREEN = 25600,
	CLR_DARKKHAKI = 7059389,
	CLR_DARKMAGENTA = 9109643,
	CLR_DARKOLIVEGREEN = 3107669,
	CLR_DARKORANGE = 36095,
	CLR_DARKORCHID = 13382297,
	CLR_DARKRED = 139,
	CLR_DARKSALMON = 8034025,
	CLR_DARKSEAGREEN = 9157775,
	CLR_DARKSLATEBLUE = 9125192,
	CLR_DARKSLATEGRAY = 5197615,
	CLR_DARKTURQUOISE = 13749760,
	CLR_DARKVIOLET = 13828244,
	CLR_DEEPPINK = 9639167,
	CLR_DEEPSKYBLUE = 16760576,
	CLR_DIMGRAY = 6908265,
	CLR_DODGERBLUE = 16748574,
	CLR_FIREBRICK = 2237106,
	CLR_FLORALWHITE = 15792895,
	CLR_FORESTGREEN = 2263842,
	CLR_FUCHSIA = 16711935,
	CLR_GAINSBORO = 14474460,
	CLR_GHOSTWHITE = 16775416,
	CLR_GOLD = 55295,
	CLR_GOLDENROD = 2139610,
	CLR_GRAY = 8421504,
	CLR_GREEN = 32768,
	CLR_GREENYELLOW = 3145645,
	CLR_HONEYDEW = 15794160,
	CLR_HOTPINK = 11823615,
	CLR_INDIANRED = 6053069,
	CLR_INDIGO = 8519755,
	CLR_IVORY = 15794175,
	CLR_KHAKI = 9234160,
	CLR_LAVENDER = 16443110,
	CLR_LAVENDERBLUSH = 16118015,
	CLR_LAWNGREEN = 64636,
	CLR_LEMONCHIFFON = 13499135,
	CLR_LIGHTBLUE = 15128749,
	CLR_LIGHTCORAL = 8421616,
	CLR_LIGHTCYAN = 16777184,
	CLR_LIGHTGOLDENRODYELLOW = 13826810,
	CLR_LIGHTGRAY = 13882323,
	CLR_LIGHTGREEN = 9498256,
	CLR_LIGHTPINK = 12695295,
	CLR_LIGHTSALMON = 8036607,
	CLR_LIGHTSEAGREEN = 11186720,
	CLR_LIGHTSKYBLUE = 16436871,
	CLR_LIGHTSLATEGRAY = 10061943,
	CLR_LIGHTSTEELBLUE = 14599344,
	CLR_LIGHTYELLOW = 14745599,
	CLR_LIME = 65280,
	CLR_LIMEGREEN = 3329330,
	CLR_LINEN = 15134970,
	CLR_MAGENTA = 16711935,
	CLR_MAROON = 128,
	CLR_MEDIUMAQUAMARINE = 11193702,
	CLR_MEDIUMBLUE = 13434880,
	CLR_MEDIUMORCHID = 13850042,
	CLR_MEDIUMPURPLE = 14381203,
	CLR_MEDIUMSEAGREEN = 7451452,
	CLR_MEDIUMSLATEBLUE = 15624315,
	CLR_MEDIUMSPRINGGREEN = 10156544,
	CLR_MEDIUMTURQUOISE = 13422920,
	CLR_MEDIUMVIOLETRED = 8721863,
	CLR_MIDNIGHTBLUE = 7346457,
	CLR_MINTCREAM = 16449525,
	CLR_MISTYROSE = 14804223,
	CLR_MOCCASIN = 11920639,
	CLR_NAVAJOWHITE = 11394815,
	CLR_NAVY = 8388608,
	CLR_OLDLACE = 15136253,
	CLR_OLIVE = 32896,
	CLR_OLIVEDRAB = 2330219,
	CLR_ORANGE = 42495,
	CLR_ORANGERED = 17919,
	CLR_ORCHID = 14053594,
	CLR_PALEGOLDENROD = 11200750,
	CLR_PALEGREEN = 10025880,
	CLR_PALETURQUOISE = 15658671,
	CLR_PALEVIOLETRED = 9662683,
	CLR_PAPAYAWHIP = 14020607,
	CLR_PEACHPUFF = 12180223,
	CLR_PERU = 4163021,
	CLR_PINK = 13353215,
	CLR_PLUM = 14524637,
	CLR_POWDERBLUE = 15130800,
	CLR_PURPLE = 8388736,
	CLR_RED = 255,
	CLR_ROSYBROWN = 9408444,
	CLR_ROYALBLUE = 14772545,
	CLR_SADDLEBROWN = 1262987,
	CLR_SALMON = 7504122,
	CLR_SANDYBROWN = 6333684,
	CLR_SEAGREEN = 5737262,
	CLR_SEASHELL = 15660543,
	CLR_SIENNA = 2970272,
	CLR_SILVER = 12632256,
	CLR_SKYBLUE = 15453831,
	CLR_SLATEBLUE = 13458026,
	CLR_SLATEGRAY = 9470064,
	CLR_SNOW = 16448255,
	CLR_SPRINGGREEN = 8388352,
	CLR_STEELBLUE = 11829830,
	CLR_TAN = 9221330,
	CLR_TEAL = 8421376,
	CLR_THISTLE = 14204888,
	CLR_TOMATO = 4678655,
	CLR_TURQUOISE = 13688896,
	CLR_VIOLET = 15631086,
	CLR_WHEAT = 11788021,
	CLR_WHITE = 16777215,
	CLR_WHITESMOKE = 16119285,
	CLR_YELLOW = 65535,
	CLR_YELLOWGREEN = 3329434,
	CLR_DARKGREY = 8421504,
	CLR_VERYDARKGREY = 4210752,
	CLR_VERYLIGHTGREY = 15461355,
	CLR_ALMOSTBLACK = 4342082,
	CLR_BUTTONFACE = 13160660
}GRE_COLORS;

typedef enum GRE_LINETYPE
{
	LT_NORMAL = 0,
	LT_BORDER = 1,
	LT_FILLED = 2
}GRE_LINETYPE;

typedef enum GRE_BACKGROUNDMODE
{
	FP_SOLID = 0,
	FP_TRANSPARENT = 1,
	FP_GRADIENT = 2,
	FP_PATTERN = 3,
	FP_HATCH = 4
}GRE_BACKGROUNDMODE;

typedef enum GRE_PATTERN
{
	FP_HORIZONTALLINE = 2,
	FP_VERTICALLINE = 3,
	FP_UPWARDDIAGONAL = 4,
	FP_DOWNWARDDIAGONAL = 5,
	FP_CROSS = 6,
	FP_DIAGONALCROSS = 7,
	FP_LIGHT = 8,
	FP_MEDIUM = 9,
	FP_DARK = 10
}GRE_PATTERN;

typedef enum GRE_FIGURETYPE
{
	FT_NONE = 0,
    FT_PROJECTUP = 1,
    FT_PROJECTDOWN = 2,
    FT_DIAMOND = 3,
    FT_CIRCLEDIAMOND = 4,
    FT_TRIANGLEUP = 5,
    FT_TRIANGLEDOWN = 6,
    FT_TRIANGLERIGHT = 7,
    FT_TRIANGLELEFT = 8,
    FT_CIRCLETRIANGLEUP = 9,
    FT_CIRCLETRIANGLEDOWN = 10,
    FT_ARROWUP = 11,
    FT_ARROWDOWN = 12,
    FT_CIRCLEARROWUP = 13,
    FT_CIRCLEARROWDOWN = 14,
    FT_SMALLPROJECTUP = 15,
    FT_SMALLPROJECTDOWN = 16,
    FT_RECTANGLE = 17,
    FT_SQUARE = 18,
    FT_CIRCLE = 19
}GRE_FIGURETYPE;

typedef enum GRE_DRAWINGOBJECT
{
	DO_GENERAL = 0,
	DO_MILESTONE = 1
}GRE_DRAWINGOBJECT;

typedef enum GRE_PAPERTYPE
{
	PK_CUSTOM = 0,
	PK_LETTER = 1,
	PK_LETTERSMALL = 2,
	PK_TABLOID = 3,
	PK_LEDGER = 4,
	PK_LEGAL = 5,
	PK_STATEMENT = 6,
	PK_EXECUTIVE = 7,
	PK_A3 = 8,
	PK_A4 = 9,
	PK_A4SMALL = 10,
	PK_A5 = 11,
	PK_B4 = 12,
	PK_B5 = 13,
	PK_FOLIO = 14,
	PK_QUARTO = 15,
	PK_STANDARD10X14 = 16,
	PK_STANDARD11X17 = 17,
	PK_NOTE = 18,
	PK_NUMBER9ENVELOPE = 19,
	PK_NUMBER10ENVELOPE = 20,
	PK_NUMBER11ENVELOPE = 21,
	PK_NUMBER12ENVELOPE = 22,
	PK_NUMBER14ENVELOPE = 23,
	PK_CSHEET = 24,
	PK_DSHEET = 25,
	PK_ESHEET = 26,
	PK_DLENVELOPE = 27,
	PK_C5ENVELOPE = 28,
	PK_C3ENVELOPE = 29,
	PK_C4ENVELOPE = 30,
	PK_C6ENVELOPE = 31,
	PK_C65ENVELOPE = 32,
	PK_B4ENVELOPE = 33,
	PK_B5ENVELOPE = 34,
	PK_B6ENVELOPE = 35,
	PK_ITALYENVELOPE = 36,
	PK_MONARCHENVELOPE = 37,
	PK_PERSONALENVELOPE = 38,
	PK_USSTANDARDFANFOLD = 39,
	PK_GERMANSTANDARDFANFOLD = 40,
	PK_GERMANLEGALFANFOLD = 41,
	PK_ISOB4 = 42,
	PK_JAPANESEPOSTCARD = 43,
	PK_STANDARD9X11 = 44,
	PK_STANDARD10X11 = 45,
	PK_STANDARD15X11 = 46,
	PK_INVITEENVELOPE = 47,
	PK_48 = 48,
	PK_49 = 49,
	PK_LETTEREXTRA = 50,
	PK_LEGALEXTRA = 51,
	PK_TABLOIDEXTRA = 52,
	PK_A4EXTRA = 53,
	PK_LETTERTRANSVERSE = 54,
	PK_A4TRANSVERSE = 55,
	PK_LETTEREXTRATRANSVERSE = 56,
	PK_APLUS = 57,
	PK_BPLUS = 58,
	PK_LETTERPLUS = 59,
	PK_A4PLUS = 60,
	PK_A5TRANSVERSE = 61,
	PK_B5TRANSVERSE = 62,
	PK_A3EXTRA = 63,
	PK_A5EXTRA = 64,
	PK_B5EXTRA = 65,
	PK_A2 = 66,
	PK_A3TRANSVERSE = 67,
	PK_A3EXTRATRANSVERSE = 68,
	PK_JAPANESEDOUBLEPOSTCARD = 69,
	PK_A6 = 70,
	PK_JAPANESEENVELOPEKAKUNUMBER2 = 71,
	PK_JAPANESEENVELOPEKAKUNUMBER3 = 72,
	PK_JAPANESEENVELOPECHOUNUMBER3 = 73,
	PK_JAPANESEENVELOPECHOUNUMBER4 = 74,
	PK_LETTERROTATED = 75,
	PK_A3ROTATED = 76,
	PK_A4ROTATED = 77,
	PK_A5ROTATED = 78,
	PK_B4JISROTATED = 79,
	PK_B5JISROTATED = 80,
	PK_JAPANESEPOSTCARDROTATED = 81,
	PK_JAPANESEDOUBLEPOSTCARDROTATED = 82,
	PK_A6ROTATED = 83,
	PK_JAPANESEENVELOPEKAKUNUMBER2ROTATED = 84,
	PK_JAPANESEENVELOPEKAKUNUMBER3ROTATED = 85,
	PK_JAPANESEENVELOPECHOUNUMBER3ROTATED = 86,
	PK_JAPANESEENVELOPECHOUNUMBER4ROTATED = 87,
	PK_B6JIS = 88,
	PK_B6JISROTATED = 89,
	PK_STANDARD12X11 = 90,
	PK_JAPANESEENVELOPEYOUNUMBER4 = 91,
	PK_JAPANESEENVELOPEYOUNUMBER4ROTATED = 92,
	PK_PRC16K = 93,
	PK_PRC32K = 94,
	PK_PRC32KBIG = 95,
	PK_PRCENVELOPENUMBER1 = 96,
	PK_PRCENVELOPENUMBER2 = 97,
	PK_PRCENVELOPENUMBER3 = 98,
	PK_PRCENVELOPENUMBER4 = 99,
	PK_PRCENVELOPENUMBER5 = 100,
	PK_PRCENVELOPENUMBER6 = 101,
	PK_PRCENVELOPENUMBER7 = 102,
	PK_PRCENVELOPENUMBER8 = 103,
	PK_PRCENVELOPENUMBER9 = 104,
	PK_PRCENVELOPENUMBER10 = 105,
	PK_PRC16KROTATED = 106,
	PK_PRC32KROTATED = 107,
	PK_PRC32KBIGROTATED = 108,
	PK_PRCENVELOPENUMBER1ROTATED = 109,
	PK_PRCENVELOPENUMBER2ROTATED = 110,
	PK_PRCENVELOPENUMBER3ROTATED = 111,
	PK_PRCENVELOPENUMBER4ROTATED = 112,
	PK_PRCENVELOPENUMBER5ROTATED = 113,
	PK_PRCENVELOPENUMBER6ROTATED = 114,
	PK_PRCENVELOPENUMBER7ROTATED = 115,
	PK_PRCENVELOPENUMBER8ROTATED = 116,
	PK_PRCENVELOPENUMBER9ROTATED = 117,
	PK_PRCENVELOPENUMBER10ROTATED = 118
}GRE_PAPERTYPE;

typedef enum GRE_ORIENTATION
{
	OT_PORTRAIT = 0,
	OT_LANDSCAPE = 1
}GRE_ORIENTATION;

typedef enum GRE_PRINTERRESOLUTION
{
	PR_HIGH = 0,
	PR_MEDIUM = 1,
	PR_LOW = 2,
	PR_DRAFT = 3,
	PR_CUSTOM = 4
}GRE_PRINTERRESOLUTION;

typedef enum GRE_VERTICALALIGNMENT 
{
	VAL_TOP = 1,
	VAL_CENTER = 2,
	VAL_BOTTOM = 3
}GRE_VERTICALALIGNMENT;

typedef enum GRE_BORDERSTYLE
{
	SBR_NONE = 0,
	SBR_SINGLE = 1,
	SBR_CUSTOM = 2
}GRE_BORDERSTYLE;

typedef enum GRE_HORIZONTALALIGNMENT
{
	HAL_LEFT = 1,
	HAL_CENTER = 2,
	HAL_RIGHT = 3
}GRE_HORIZONTALALIGNMENT;

typedef enum GRE_GRADIENTFILLMODE
{
	GDT_HORIZONTAL = 0,
	GDT_VERTICAL = 1
}GRE_GRADIENTFILLMODE;

typedef enum GRE_FILLMODE
{
	FM_COMPLETELYFILLED = 0,
	FM_UPPERHALFFILLED = 1,
	FM_LOWERHALFFILLED = 2
}GRE_FILLMODE;

typedef enum E_TIERPOSITION
{
	SP_UPPER = 0,
	SP_LOWER = 1,
	SP_MIDDLE = 2
}E_TIERPOSITION;

typedef enum E_SORTTYPE 
{
	ES_STRING = 0,
	ES_NUMERIC = 1,
	ES_DATE = 2
}E_SORTTYPE;

typedef enum E_ADDMODE 
{
	AT_TASKADD = 0,
	AT_MILESTONEADD = 1,
	AT_BOTH = 2,
	AT_DURATION_TASKADD = 3,
    AT_DURATION_MILESTONEADD = 4,
    AT_DURATION_BOTH = 5
}E_ADDMODE;

typedef enum E_OBJECTTYPE
{
	OT_TASK = 0,
	OT_MILESTONE = 1
}E_OBJECTTYPE;

typedef enum E_PLACEMENT
{
	PLC_ROWEXTENTSPLACEMENT = 0,
	PLC_OFFSETPLACEMENT = 1
}E_PLACEMENT;

typedef enum E_STYLEAPPEARANCE
{
	SA_RAISED = 0,
	SA_SUNKEN = 1,
	SA_FLAT = 2,
	SA_GRAPHICAL = 3
}E_STYLEAPPEARANCE;

typedef enum E_SCROLLBEHAVIOUR
{
	SB_DISABLE = 0,
	SB_HIDE = 1
}E_SCROLLBEHAVIOUR;

typedef enum E_REPORTERRORS 
{
	RE_MSGBOX = 0,
	RE_RAISE = 1,
	RE_RAISEEVENT = 2,
	RE_HIDE = 3
}E_REPORTERRORS;

typedef enum E_BORDERSTYLE
{
	TLB_NONE = 0,
	TLB_SINGLE = 1,
	TLB_3D = 2
}E_BORDERSTYLE;

typedef enum E_TIERTYPE
{
	ST_NOT_VISIBLE = 0,
	ST_DAYOFWEEK = 1,
	ST_MONTH = 2,
	ST_QUARTER = 3,
	ST_YEAR = 4,
	ST_WEEK = 5,
	ST_CUSTOM = 6,
	ST_DAY = 7,
	ST_DAYOFYEAR = 8,
	ST_HOUR = 9,
	ST_MINUTE = 10,
	ST_SECOND = 11,
	ST_MILLISECOND = 12,
	ST_MICROSECOND = 13
}E_TIERTYPE;

typedef enum E_TIMEBLOCKBEHAVIOUR
{
	TBB_ROWEXTENTS = 0,
	TBB_CONTROLEXTENTS = 1
}E_TIMEBLOCKBEHAVIOUR;

typedef enum E_MOVEMENTTYPE
{
	MT_UNRESTRICTED = 0,
	MT_RESTRICTEDTOROW = 1,
	MT_MOVEMENTDISABLED = 2
}E_MOVEMENTTYPE;

typedef enum E_TICKMARKTYPES
{
	TLT_BIG = 0,
	TLT_MEDIUM = 1,
	TLT_SMALL = 2
}E_TICKMARKTYPES;

typedef enum E_SCROLLBAR
{
	SCR_VERTICAL = 0,
	SCR_HORIZONTAL1 = 1,
	SCR_HORIZONTAL2 = 2
}E_SCROLLBAR;

typedef enum E_EVENTTARGET
{
    EVT_NONE = 0,
    EVT_TASK = 1,
    EVT_PERCENTAGE = 2,
    EVT_MILESTONE = 3,
    EVT_ROW = 4,
    EVT_CELL = 5,
    EVT_COLUMN = 6,
    EVT_CLIENTAREA = 7,
    EVT_EMPTYAREA = 8,
    EVT_GRID = 9,
    EVT_TIMELINE = 10,
    EVT_TIMEBLOCK = 11,
    EVT_HSCROLLBAR = 12,
    EVT_TIMELINESCROLLBAR = 13,
    EVT_VSCROLLBAR = 14,
    EVT_TREEVIEW = 15,
    EVT_SPLITTER = 16,
    EVT_NODE = 17,
    EVT_TREEVIEWCHECKBOX = 19,
    EVT_TREEVIEWSIGN = 20,
    EVT_SELECTEDCOLUMN = 50,
    EVT_SELECTEDROW = 51,
    EVT_SELECTEDTASK = 52,
    EVT_SELECTEDPERCENTAGE = 54,
	EVT_PREDECESSOR = 56,
	EVT_SELECTEDPREDECESSOR = 57
}E_EVENTTARGET;

typedef enum E_CONTROLMODE
{
    CM_GRID = 0,
    CM_TREEVIEW = 1,
}E_CONTROLMODE;

typedef enum GRE_HATCHSTYLE
{
	HSE_HORIZONTAL = 0,
	HSE_VERTICAL = 1,
	HS_FORWARDDIAGONAL = 2,
	HS_BACKWARDDIAGONAL = 3,
	HS_LARGEGRID = 4,
	HS_DIAGONALCROSS = 5,
	HS_PERCENT05 = 6,
	HS_PERCENT10 = 7,
	HS_PERCENT20 = 8,
	HS_PERCENT25 = 9,
	HS_PERCENT30 = 10,
	HS_PERCENT40 = 11,
	HS_PERCENT50 = 12,
	HS_PERCENT60 = 13,
	HS_PERCENT70 = 14,
	HS_PERCENT75 = 15,
	HS_PERCENT80 = 16,
	HS_PERCENT90 = 17,
	HS_LIGHTDOWNWARDDIAGONAL = 18,
	HS_LIGHTUPWARDDIAGONAL = 19,
	HS_DARKDOWNWARDDIAGONAL = 20,
	HS_DARKUPWARDDIAGONAL = 21,
	HS_WIDEDOWNWARDDIAGONAL = 22,
	HS_WIDEUPWARDDIAGONAL = 23,
	HS_LIGHTVERTICAL = 24,
	HS_LIGHTHORIZONTAL = 25,
	HS_NARROWVERTICAL = 26,
	HS_NARROWHORIZONTAL = 27,
	HS_DARKVERTICAL = 28,
	HS_DARKHORIZONTAL = 29,
	HS_DASHEDDOWNWARDDIAGONAL = 30,
	HS_DASHEDUPWARDDIAGONAL = 31,
	HS_DASHEDHORIZONTAL = 32,
	HS_DASHEDVERTICAL = 33,
	HS_SMALLCONFETTI = 34,
	HS_LARGECONFETTI = 35,
	HS_ZIGZAG = 36,
	HS_WAVE = 37,
	HS_DIAGONALBRICK = 38,
	HS_HORIZONTALBRICK = 39,
	HS_WEAVE = 40,
	HS_PLAID = 41,
	HS_DIVOT = 42,
	HS_DOTTEDGRID = 43,
	HS_DOTTEDDIAMOND = 44,
	HS_SHINGLE = 45,
	HS_TRELLIS = 46,
	HS_SPHERE = 47,
	HS_SMALLGRID = 48,
	HS_SMALLCHECKERBOARD = 49,
	HS_LARGECHECKERBOARD = 50,
	HS_OUTLINEDDIAMOND = 51,
	HS_SOLIDDIAMOND = 52
}GRE_HATCHSTYLE;

typedef enum E_TEXTOBJECTTYPE
{
    TOT_TASK = 1,
    TOT_ROW = 2,
    TOT_CELL = 3,
    TOT_COLUMN = 4,
    TOT_NODE = 5,
}E_TEXTOBJECTTYPE;

typedef enum E_PREDECESSORMODE
{
    PM_FORCE = 0,
    PM_CREATEWARNINGFLAG = 1,
    PM_RAISEEVENT = 2
}E_PREDECESSORMODE;

typedef enum E_TASKTYPE
{
    TT_START_END = 0,
    TT_DURATION = 1,
    TT_UNITS_DURATION_WORK = 2
}E_TASKTYPE;

typedef enum E_TBINTERVALTYPE
{
    TBIT_AUTOMATIC = 0,
    TBIT_MANUAL = 1
}E_TBINTERVALTYPE;

typedef enum E_TREEVIEWMODE
{
    TM_NONE = 0,
    TM_PLUSMINUSSIGNS = 1,
    TM_EXPANDCOLLAPSEICONS = 2,
}E_TREEVIEWMODE;

typedef enum E_CHANGETYPE
{
    CT_MOVE = 0,
    CT_SIZE = 1
}E_CHANGETYPE;

typedef enum SYS_ERRORS
{
	C_ROIV_UNK_TYPE = 50001,
	C_ROBV_UNK_TYPE = 50002,
	C_ROSV_UNK_TYPE = 50003,
	C_ROSV_DISP_TYPE = 50004,
	C_ROLV_UNK_TYPE = 50005,
	C_INVALID_PROP_NAME_1 = 50006,
	C_INVALID_PROP_NAME_2 = 50007,
	ERR_RETARRELEMKEY_G = 51132,
	ERR_COLLREMWHERE_1_G = 51133,
	ERR_COLLREMWHERE_2_G = 51134,
	ERR_COLLREMWHERE_3_G = 51135,
	ERR_COLLREMWHERE_4_G = 51136,
	ERR_COLLREMWHERENOT_1_G = 51137,
	ERR_COLLREMWHERENOT_2_G = 51138,
	ERR_COLLREMWHERENOT_3_G = 51139,
	ERR_COLLREMWHERENOT_4_G = 51140,
	ERR_ADDMODE_G = 51141,
	TASKS_ITEM_1 = 51142,
	TASKS_ITEM_2 = 51143,
	TASKS_ITEM_3 = 51144,
	TASKS_ITEM_4 = 51145,
	TASKS_ADD_1 = 51146,
	TASKS_ADD_2 = 51147,
	TASKS_ADD_3 = 51148,
	TASKS_REMOVE_1 = 51149,
	TASKS_REMOVE_2 = 51150,
	TASKS_REMOVE_3 = 51151,
	TASKS_REMOVE_4 = 51152,
	TASKS_SET_KEY = 51153,
	ROWS_ITEM_1 = 51155,
	ROWS_ITEM_2 = 51156,
	ROWS_ITEM_3 = 51157,
	ROWS_ITEM_4 = 51158,
	ROWS_ADD_1 = 51159,
	ROWS_ADD_2 = 51160,
	ROWS_ADD_3 = 51161,
	ROWS_REMOVE_1 = 51162,
	ROWS_REMOVE_2 = 51163,
	ROWS_REMOVE_3 = 51164,
	ROWS_REMOVE_4 = 51165,
	ROWS_SET_KEY = 51166,
	COLUMNS_ITEM_1 = 51168,
	COLUMNS_ITEM_2 = 51169,
	COLUMNS_ITEM_3 = 51170,
	COLUMNS_ITEM_4 = 51171,
	COLUMNS_ADD_1 = 51172,
	COLUMNS_ADD_2 = 51173,
	COLUMNS_ADD_3 = 51174,
	COLUMNS_REMOVE_1 = 51175,
	COLUMNS_REMOVE_2 = 51176,
	COLUMNS_REMOVE_3 = 51177,
	COLUMNS_REMOVE_4 = 51178,
	COLUMNS_SET_KEY = 51179,
	CELLS_ITEM_1 = 51181,
	CELLS_ITEM_2 = 51182,
	CELLS_ITEM_3 = 51183,
	CELLS_ITEM_4 = 51184,
	CELLS_ADD_1 = 51185,
	CELLS_ADD_2 = 51186,
	CELLS_ADD_3 = 51187,
	CELLS_REMOVE_1 = 51188,
	CELLS_REMOVE_2 = 51189,
	CELLS_REMOVE_3 = 51190,
	CELLS_REMOVE_4 = 51191,
	CELLS_SET_KEY = 51192,
	PREDECESSORS_ITEM_1 = 51194,
	PREDECESSORS_ITEM_2 = 51195,
	PREDECESSORS_ITEM_3 = 51196,
	PREDECESSORS_ITEM_4 = 51197,
	PREDECESSORS_ADD_1 = 51198,
	PREDECESSORS_ADD_2 = 51199,
	PREDECESSORS_ADD_3 = 51200,
	PREDECESSORS_REMOVE_1 = 51201,
	PREDECESSORS_REMOVE_2 = 51202,
	PREDECESSORS_REMOVE_3 = 51203,
	PREDECESSORS_REMOVE_4 = 51204,
	PREDECESSORS_SET_KEY = 51205,
	TIMEBLOCKS_ITEM_1 = 51207,
	TIMEBLOCKS_ITEM_2 = 51208,
	TIMEBLOCKS_ITEM_3 = 51209,
	TIMEBLOCKS_ITEM_4 = 51210,
	TIMEBLOCKS_ADD_1 = 51211,
	TIMEBLOCKS_ADD_2 = 51212,
	TIMEBLOCKS_ADD_3 = 51213,
	TIMEBLOCKS_REMOVE_1 = 51214,
	TIMEBLOCKS_REMOVE_2 = 51215,
	TIMEBLOCKS_REMOVE_3 = 51216,
	TIMEBLOCKS_REMOVE_4 = 51217,
	TIMEBLOCKS_SET_KEY = 51218,
	LAYERS_ITEM_1 = 51220,
	LAYERS_ITEM_2 = 51221,
	LAYERS_ITEM_3 = 51222,
	LAYERS_ITEM_4 = 51223,
	LAYERS_ADD_1 = 51224,
	LAYERS_ADD_2 = 51225,
	LAYERS_ADD_3 = 51226,
	LAYERS_REMOVE_1 = 51227,
	LAYERS_REMOVE_2 = 51228,
	LAYERS_REMOVE_3 = 51229,
	LAYERS_REMOVE_4 = 51230,
	LAYERS_SET_KEY = 51231,
	STYLES_ITEM_1 = 51233,
	STYLES_ITEM_2 = 51234,
	STYLES_ITEM_3 = 51235,
	STYLES_ITEM_4 = 51236,
	STYLES_ADD_1 = 51237,
	STYLES_ADD_2 = 51238,
	STYLES_ADD_3 = 51239,
	STYLES_REMOVE_1 = 51240,
	STYLES_REMOVE_2 = 51241,
	STYLES_REMOVE_3 = 51242,
	STYLES_REMOVE_4 = 51243,
	STYLES_SET_KEY = 51244,
	PERCENTAGES_ITEM_1 = 51246,
	PERCENTAGES_ITEM_2 = 51247,
	PERCENTAGES_ITEM_3 = 51248,
	PERCENTAGES_ITEM_4 = 51249,
	PERCENTAGES_ADD_1 = 51250,
	PERCENTAGES_ADD_2 = 51251,
	PERCENTAGES_ADD_3 = 51252,
	PERCENTAGES_REMOVE_1 = 51253,
	PERCENTAGES_REMOVE_2 = 51254,
	PERCENTAGES_REMOVE_3 = 51255,
	PERCENTAGES_REMOVE_4 = 51256,
	PERCENTAGES_SET_KEY = 51257,
	VIEWS_ITEM_1 = 51272,
	VIEWS_ITEM_2 = 51273,
	VIEWS_ITEM_3 = 51274,
	VIEWS_ITEM_4 = 51275,
	VIEWS_ADD_1 = 51276,
	VIEWS_ADD_2 = 51277,
	VIEWS_ADD_3 = 51278,
	VIEWS_REMOVE_1 = 51279,
	VIEWS_REMOVE_2 = 51280,
	VIEWS_REMOVE_3 = 51281,
	VIEWS_REMOVE_4 = 51282,
	VIEWS_SET_KEY = 51283,
	TIERCOLORS_ITEM_1 = 51285,
	TIERCOLORS_ITEM_2 = 51286,
	TIERCOLORS_ITEM_3 = 51287,
	TIERCOLORS_ITEM_4 = 51288,
	TIERCOLORS_ADD_1 = 51289,
	TIERCOLORS_ADD_2 = 51290,
	TIERCOLORS_ADD_3 = 51291,
	TIERCOLORS_REMOVE_1 = 51292,
	TIERCOLORS_REMOVE_2 = 51293,
	TIERCOLORS_REMOVE_3 = 51294,
	TIERCOLORS_REMOVE_4 = 51295,
	TIERCOLORS_SET_KEY = 51296,
	TICKMARKS_ITEM_1 = 51298,
	TICKMARKS_ITEM_2 = 51299,
	TICKMARKS_ITEM_3 = 51300,
	TICKMARKS_ITEM_4 = 51301,
	TICKMARKS_ADD_1 = 51302,
	TICKMARKS_ADD_2 = 51303,
	TICKMARKS_ADD_3 = 51304,
	TICKMARKS_REMOVE_1 = 51305,
	TICKMARKS_REMOVE_2 = 51306,
	TICKMARKS_REMOVE_3 = 51307,
	TICKMARKS_REMOVE_4 = 51308,
	TICKMARKS_SET_KEY = 51309,
	INVALID_INTERVAL = 51310,
	INVALID_LAYER_INDEX = 51311,
	GETINDEXANDKEY_ITEM1 = 51312,
	GETINDEXANDKEY_ITEM2 = 51313,
	GETINDEXANDKEY_ITEM3 = 51314,
	GETINDEXANDKEY_ITEM4 = 51315,
	INVALID_ROW_KEY = 51316,
	STYLE_INVALID_INDEX = 51317,
	STYLE_INVALID_KEY = 51318,
	MP_REMOVE_1 = 51596,
	MP_REMOVE_2 = 51597,
	MP_REMOVE_3 = 51598,
	MP_REMOVE_4 = 51599,
	MP_ITEM_1 = 51600,
	MP_ITEM_2 = 51601,
	MP_ITEM_3 = 51602,
	MP_ITEM_4 = 51603,
	MP_ADD_1 = 51604,
	MP_ADD_2 = 51605,
	MP_ADD_3 = 51606,
	MP_SET_KEY = 51607,
	SPLITTER_INVALIDOP = 51608,
	SPLITTER_INVALID_INDEX = 51609,
	SPLITTER_INVALID_WIDTH = 51610,
    STYLE_NULL = 51611,
    INVALID_DURATION_INTERVAL = 51612,
    CHECK_DURATION_ERROR = 51613,
	ERR_DURATION_INCONSISTENT = 51614,
	PROGRESSLINE_INVALIDOP = 51615,
	PROGRESSLINE_INVALID_INDEX = 51616,
	PROGRESSLINE_INVALID_WIDTH = 51617,
	PRINTER_INVALID_DATE_RANGE = 51618,
	PRINTER_NO_ROWS = 51619,
	PRINTER_INVALID_ROW_RANGE = 51620,
	PRINTER_INVALID_COLUMN = 51621,
	PRINTER_INVALID_ROW = 51622,
	PRINTER_INVALID_PAGE = 51623,
    PRINTER_INVALID_PAGE_RANGE = 51624,
	PRINTER_INVALID_SCALE = 51625,
    PRINTER_INVALID_SPECS_MARGINS = 51626,
    PRINTER_INVALID_SPECS_HEIGHT = 51627,
    PRINTER_INVALID_SPECS_COLUMNSINEVERYPAGE = 51628,
    PRINTER_INVALID_SPECS_COLUMNS = 51629,
    PRINTER_INVALID_SPECS_INTERVAL = 51630,
	OBJECT_COUNT_ERROR = 51631,
	ERR_RETARRELEMINDEX_G = 51632,
	NODE_INVALID_DEPTH = 51633,
	ROWS_INVALID_TREE_STRUCTURE = 51634,
}SYS_ERRORS;

typedef enum E_OPERATION
{
    EO_NONE = 0,

    EO_TASKADDITION = 1,
    EO_TASKMOVEMENT = 2,
    EO_TASKSTRETCHLEFT = 3,
    EO_TASKSTRETCHRIGHT = 4,
    EO_TASKSELECTION = 5,

    EO_MILESTONEADDITION = 6,


    EO_ROWSIZING = 9,
    EO_ROWMOVEMENT = 10,
    EO_ROWSELECTION = 11,

    EO_COLUMNSIZING = 12,
    EO_COLUMNMOVEMENT = 13,
    EO_COLUMNSELECTION = 14,



    EO_TIMELINEMOVEMENT = 16,


    EO_SPLITTERMOVEMENT = 18,

    EO_HORIZONTALSCROLLBAR = 19,
    EO_VERTICALSCROLLBAR = 20,
    EO_TIMELINESCROLLBAR = 21,
    EO_TREEVIEW = 22,

    EO_PERCENTAGESELECTION = 23,
    EO_PERCENTAGESIZING = 24,

    //Treeview
    EO_CHECKBOXCLICK = 27,
    EO_SIGNCLICK = 28,

	EO_PREDECESSORADDITION = 29,
	EO_PREDECESSORSELECTION = 30
		
}E_OPERATION;

typedef enum E_MOUSEBUTTONS
{
	BTN_NONE = 0,
	BTN_LEFT = 1048576,
	BTN_RIGHT = 2097152,
	BTN_MIDDLE = 4194304,
	BTN_XBUTTON1 = 8388608,
	BTN_XBUTTON2 = 16777216
}E_MOUSEBUTTONS;

typedef enum E_CONSTRAINTTYPE
{
	PCT_END_TO_START = 0,
	PCT_START_TO_START = 1,
	PCT_END_TO_END = 2,
	PCT_START_TO_END = 3
}E_CONSTRAINTTYPE;

typedef enum E_TOOLTIPTYPE
{
	TPT_HOVER = 0,
	TPT_MOVEMENT = 1
}E_TOOLTIPTYPE;

typedef enum E_TIMEBLOCKTYPE
{
	TBT_SINGLE_OCURRENCE = 0,
	TBT_RECURRING = 1
}E_TIMEBLOCKTYPE;

typedef enum E_RECURRINGTYPE
{
    RCT_DAY = 3,
    RCT_WEEK = 4,
    RCT_MONTH = 5,
    RCT_YEAR = 7
}E_RECURRINGTYPE;

typedef enum E_WEEKDAY
{
	WD_SUNDAY = 0,
	WD_MONDAY = 1,
	WD_TUESDAY = 2,
	WD_WEDNESDAY = 3,
	WD_THURSDAY = 4,
	WD_FRIDAY = 5,
	WD_SATURDAY = 6
}E_WEEKDAY;

typedef enum E_CALENDARWEEKRULES
{
    CWR_FIRSTDAY = 0,
    CWR_FIRSTFULLWEEK = 1,
    CWR_FIRSTFOURDAYWEEK = 2
}E_CALENDARWEEKRULES;

typedef enum E_TEXTPLACEMENT
{
	SCP_OBJECTEXTENTSPLACEMENT = 0,
	SCP_OFFSETPLACEMENT = 1,
	SCP_EXTERIORPLACEMENT = 2
}E_TEXTPLACEMENT;

typedef enum E_PROGRESSLINELENGTH
{
    TLMA_TICKMARKAREA = 0,
    TLMA_CLIENTAREA = 1,
    TLMA_TIMELINE = 2,
    TLMA_CA_TIMELINE = 3,
    TLMA_CA_TICKMARKAREA = 4,
    TLMA_NONE = 5
}E_PROGRESSLINELENGTH;

typedef enum E_PROGRESSLINESTYLE
{
    PLT_STANDARD = 1,
    PLT_USERDEFINED = 2,
    PLT_STYLE = 3
}E_PROGRESSLINESTYLE;

typedef enum E_PROGRESSLINETYPE
{
	TLMT_SYSTEMTIME = 0,
	TLMT_USER = 1
}E_PROGRESSLINETYPE;

typedef enum E_LAYEROBJECTENABLE
{
	EC_INCURRENTLAYERONLY = 0,
	EC_INALLLAYERS = 1
}E_LAYEROBJECTENABLE;

typedef enum GRE_FONTSTYLE
{
    FS_FONTSTYLEREGULAR = 0,
    FS_FONTSTYLEBOLD = 1,
    FS_FONTSTYLEITALIC = 2,
    FS_FONTSTYLEBOLDITALIC = 3,
    FS_FONTSTYLEUNDERLINE = 4,
    FS_FONTSTYLESTRIKEOUT = 8
}GRE_FONTSTYLE;

typedef enum GRE_UNIT
{
    UT_UNITWORLD = 0,
    UT_UNITDISPLAY = 1,
    UT_UNITPIXEL = 2,
    UT_UNITPOINT = 3,
    UT_UNITINCH = 4,
    UT_UNITDOCUMENT = 5,
    UT_UNITMILLIMETER = 6
}GRE_UNIT;

typedef enum E_INTERVAL
{
    IL_SECOND = 3,
    IL_MINUTE = 4,
    IL_HOUR = 5,
    IL_DAY = 6,
    IL_WEEK = 7,
    IL_MONTH = 8,
    IL_QUARTER = 9,
    IL_YEAR = 10
}E_INTERVAL;

typedef enum E_SPLITTERTYPE
{
	SA_APPEARANCE = 1,
	SA_USERDEFINED = 2,
	SA_STYLE = 3
}E_SPLITTERTYPE;

typedef enum E_TIERBACKGROUNDMODE
{
	ETBGM_TIERAPPEARANCE = 0,
	ETBGM_STYLE = 2
}E_TIERBACKGROUNDMODE;

typedef enum E_OBJECTSCOPE
{
    OS_CONTROL = 0,
    OS_VIEW = 1
}E_OBJECTSCOPE;

typedef enum E_OBJECTTEMPLATE
{
    STO_NONE = 0,
    STO_BW_HATCH = 1,
    STO_COLOR_HATCH = 2,
    STO_GREY_SOLID = 3,
    STO_COLORS_SOLID = 4,
    STO_DEFAULT = 5,
    STO_VARIATION_1 = 6
}E_OBJECTTEMPLATE;

typedef enum E_CONTROLTEMPLATE
{
    STC_NONE = 0,
    STC_CH_SOLID_WHITE = 1,
    STC_CH_SOLID_DARK_BLUE = 2,
    STC_CH_SOLID_VIOLET = 3,
    STC_CH_SOLID_GREEN = 4,
    STC_CH_SOLID_RED = 5,
    STC_CH_SOLID_LIGHT_BLUE = 6,
    STC_CH_SOLID_GREY = 7,
    STC_CH_SOLID_LIGHT_STEEL_BLUE = 8,
    STC_CH_VGRAD_YELLOW = 9,
    STC_CH_VGRAD_ORANGE = 10,
    STC_CH_VGRAD_RED = 11,
    STC_CH_VGRAD_CRIMSON = 12,
    STC_CH_VGRAD_MAGENTA = 13,
    STC_CH_VGRAD_MULBERRY = 14,
    STC_CH_VGRAD_BLUE_VIOLET = 15,
    STC_CH_VGRAD_ANAKIWA_BLUE = 16,
    STC_CH_VGRAD_BLUE_BELL = 17,
    STC_CH_VGRAD_BLUE = 18,
    STC_CH_VGRAD_AERO = 19,
    STC_CH_HGRAD_YELLOW = 20,
    STC_CH_HGRAD_ORANGE = 21,
    STC_CH_HGRAD_RED = 22,
    STC_CH_HGRAD_CRIMSON = 23,
    STC_CH_HGRAD_MAGENTA = 24,
    STC_CH_HGRAD_MULBERRY = 25,
    STC_CH_HGRAD_BLUE_VIOLET = 26,
    STC_CH_HGRAD_ANAKIWA_BLUE = 27,
    STC_CH_HGRAD_BLUE_BELL = 28,
    STC_CH_HGRAD_BLUE = 29,
    STC_CH_HGRAD_AERO = 30
}E_CONTROLTEMPLATE;

typedef enum E_SELECTIONRECTANGLEMODE
{
    SRM_DOTTED = 0,
    SRM_COLOR = 1
}E_SELECTIONRECTANGLEMODE;

typedef enum E_KEYS
{
	KEYS_NONE = 0,
	KEYS_LBUTTON = 1,
	KEYS_RBUTTON = 2,
	KEYS_CANCEL = 3,
	KEYS_MBUTTON = 4,
	KEYS_XBUTTON1 = 5,
	KEYS_XBUTTON2 = 6,
	KEYS_LBUTTON_XBUTTON2 = 7,
	KEYS_BACK = 8,
	KEYS_TAB = 9,
	KEYS_LINEFEED = 10,
	KEYS_LBUTTON_LINEFEED = 11,
	KEYS_CLEAR = 12,
	KEYS_ENTER = 13,
	KEYS_RBUTTON_CLEAR = 14,
	KEYS_RBUTTON_ENTER = 15,
	KEYS_SHIFTKEY = 16,
	KEYS_CONTROLKEY = 17,
	KEYS_MENU = 18,
	KEYS_PAUSE = 19,
	KEYS_CAPITAL = 20,
	KEYS_HANGULMODE = 21,
	KEYS_RBUTTON_CAPITAL = 22,
	KEYS_JUNJAMODE = 23,
	KEYS_FINALMODE = 24,
	KEYS_HANJAMODE = 25,
	KEYS_RBUTTON_FINALMODE = 26,
	KEYS_ESCAPE = 27,
	KEYS_IMECONVERT = 28,
	KEYS_IMENONCONVERT = 29,
	KEYS_IMEACEEPT = 30,
	KEYS_IMEMODECHANGE = 31,
	KEYS_SPACE = 32,
	KEYS_PRIOR = 33,
	KEYS_NEXT = 34,
	KEYS_END = 35,
	KEYS_HOME = 36,
	KEYS_LEFT = 37,
	KEYS_UP = 38,
	KEYS_RIGHT = 39,
	KEYS_DOWN = 40,
	KEYS_SELECT = 41,
	KEYS_PRINT = 42,
	KEYS_EXECUTE = 43,
	KEYS_SNAPSHOT = 44,
	KEYS_INSERT = 45,
	KEYS_DELETE = 46,
	KEYS_HELP = 47,
	KEYS_D0 = 48,
	KEYS_D1 = 49,
	KEYS_D2 = 50,
	KEYS_D3 = 51,
	KEYS_D4 = 52,
	KEYS_D5 = 53,
	KEYS_D6 = 54,
	KEYS_D7 = 55,
	KEYS_D8 = 56,
	KEYS_D9 = 57,
	KEYS_RBUTTON_D8 = 58,
	KEYS_RBUTTON_D9 = 59,
	KEYS_MBUTTON_D8 = 60,
	KEYS_MBUTTON_D9 = 61,
	KEYS_XBUTTON2_D8 = 62,
	KEYS_XBUTTON2_D9 = 63,
	KEYS_64 = 64,
	KEYS_A = 65,
	KEYS_B = 66,
	KEYS_C = 67,
	KEYS_D = 68,
	KEYS_E = 69,
	KEYS_F = 70,
	KEYS_G = 71,
	KEYS_H = 72,
	KEYS_I = 73,
	KEYS_J = 74,
	KEYS_K = 75,
	KEYS_L = 76,
	KEYS_M = 77,
	KEYS_N = 78,
	KEYS_O = 79,
	KEYS_P = 80,
	KEYS_Q = 81,
	KEYS_R = 82,
	KEYS_S = 83,
	KEYS_T = 84,
	KEYS_U = 85,
	KEYS_V = 86,
	KEYS_W = 87,
	KEYS_X = 88,
	KEYS_Y = 89,
	KEYS_Z = 90,
	KEYS_LWIN = 91,
	KEYS_RWIN = 92,
	KEYS_APPS = 93,
	KEYS_RBUTTON_RWIN = 94,
	KEYS_RBUTTON_APPS = 95,
	KEYS_NUMPAD0 = 96,
	KEYS_NUMPAD1 = 97,
	KEYS_NUMPAD2 = 98,
	KEYS_NUMPAD3 = 99,
	KEYS_NUMPAD4 = 100,
	KEYS_NUMPAD5 = 101,
	KEYS_NUMPAD6 = 102,
	KEYS_NUMPAD7 = 103,
	KEYS_NUMPAD8 = 104,
	KEYS_NUMPAD9 = 105,
	KEYS_MULTIPLY = 106,
	KEYS_ADD = 107,
	KEYS_SEPARATOR = 108,
	KEYS_SUBTRACT = 109,
	KEYS_DECIMAL = 110,
	KEYS_DIVIDE = 111,
	KEYS_F1 = 112,
	KEYS_F2 = 113,
	KEYS_F3 = 114,
	KEYS_F4 = 115,
	KEYS_F5 = 116,
	KEYS_F6 = 117,
	KEYS_F7 = 118,
	KEYS_F8 = 119,
	KEYS_F9 = 120,
	KEYS_F10 = 121,
	KEYS_F11 = 122,
	KEYS_F12 = 123,
	KEYS_F13 = 124,
	KEYS_F14 = 125,
	KEYS_F15 = 126,
	KEYS_F16 = 127,
	KEYS_F17 = 128,
	KEYS_F18 = 129,
	KEYS_F19 = 130,
	KEYS_F20 = 131,
	KEYS_F21 = 132,
	KEYS_F22 = 133,
	KEYS_F23 = 134,
	KEYS_F24 = 135,
	KEYS_BACK_F17 = 136,
	KEYS_BACK_F18 = 137,
	KEYS_BACK_F19 = 138,
	KEYS_BACK_F20 = 139,
	KEYS_BACK_F21 = 140,
	KEYS_BACK_F22 = 141,
	KEYS_BACK_F23 = 142,
	KEYS_BACK_F24 = 143,
	KEYS_NUMLOCK = 144,
	KEYS_SCROLL = 145,
	KEYS_RBUTTON_NUMLOCK = 146,
	KEYS_RBUTTON_SCROLL = 147,
	KEYS_MBUTTON_NUMLOCK = 148,
	KEYS_MBUTTON_SCROLL = 149,
	KEYS_XBUTTON2_NUMLOCK = 150,
	KEYS_XBUTTON2_SCROLL = 151,
	KEYS_BACK_NUMLOCK = 152,
	KEYS_BACK_SCROLL = 153,
	KEYS_LINEFEED_NUMLOCK = 154,
	KEYS_LINEFEED_SCROLL = 155,
	KEYS_CLEAR_NUMLOCK = 156,
	KEYS_CLEAR_SCROLL = 157,
	KEYS_RBUTTON_CLEAR_NUMLOCK = 158,
	KEYS_RBUTTON_CLEAR_SCROLL = 159,
	KEYS_LSHIFTKEY = 160,
	KEYS_RSHIFTKEY = 161,
	KEYS_LCONTROLKEY = 162,
	KEYS_RCONTROLKEY = 163,
	KEYS_LMENU = 164,
	KEYS_RMENU = 165,
	KEYS_BROWSERBACK = 166,
	KEYS_BROWSERFORWARD = 167,
	KEYS_BROWSERREFRESH = 168,
	KEYS_BROWSERSTOP = 169,
	KEYS_BROWSERSEARCH = 170,
	KEYS_BROWSERFAVORITES = 171,
	KEYS_BROWSERHOME = 172,
	KEYS_VOLUMEMUTE = 173,
	KEYS_VOLUMEDOWN = 174,
	KEYS_VOLUMEUP = 175,
	KEYS_MEDIANEXTTRACK = 176,
	KEYS_MEDIAPREVIOUSTRACK = 177,
	KEYS_MEDIASTOP = 178,
	KEYS_MEDIAPLAYPAUSE = 179,
	KEYS_LAUNCHMAIL = 180,
	KEYS_SELECTMEDIA = 181,
	KEYS_LAUNCHAPPLICATION1 = 182,
	KEYS_LAUNCHAPPLICATION2 = 183,
	KEYS_BACK_MEDIANEXTTRACK = 184,
	KEYS_BACK_MEDIAPREVIOUSTRACK = 185,
	KEYS_OEMSEMICOLON = 186,
	KEYS_OEMPLUS = 187,
	KEYS_OEMCOMMA = 188,
	KEYS_OEMMINUS = 189,
	KEYS_OEMPERIOD = 190,
	KEYS_OEMQUESTION = 191,
	KEYS_OEMTILDE = 192,
	KEYS_LBUTTON_OEMTILDE = 193,
	KEYS_RBUTTON_OEMTILDE = 194,
	KEYS_CANCEL_OEMTILDE = 195,
	KEYS_MBUTTON_OEMTILDE = 196,
	KEYS_XBUTTON1_OEMTILDE = 197,
	KEYS_XBUTTON2_OEMTILDE = 198,
	KEYS_LBUTTON_XBUTTON2_OEMTILDE = 199,
	KEYS_BACK_OEMTILDE = 200,
	KEYS_TAB_OEMTILDE = 201,
	KEYS_LINEFEED_OEMTILDE = 202,
	KEYS_LBUTTON_LINEFEED_OEMTILDE = 203,
	KEYS_CLEAR_OEMTILDE = 204,
	KEYS_ENTER_OEMTILDE = 205,
	KEYS_RBUTTON_CLEAR_OEMTILDE = 206,
	KEYS_RBUTTON_ENTER_OEMTILDE = 207,
	KEYS_SHIFTKEY_OEMTILDE = 208,
	KEYS_CONTROLKEY_OEMTILDE = 209,
	KEYS_MENU_OEMTILDE = 210,
	KEYS_PAUSE_OEMTILDE = 211,
	KEYS_CAPITAL_OEMTILDE = 212,
	KEYS_HANGULMODE_OEMTILDE = 213,
	KEYS_RBUTTON_CAPITAL_OEMTILDE = 214,
	KEYS_JUNJAMODE_OEMTILDE = 215,
	KEYS_FINALMODE_OEMTILDE = 216,
	KEYS_HANJAMODE_OEMTILDE = 217,
	KEYS_RBUTTON_FINALMODE_OEMTILDE = 218,
	KEYS_OEMOPENBRACKETS = 219,
	KEYS_OEMPIPE = 220,
	KEYS_OEMCLOSEBRACKETS = 221,
	KEYS_OEMQUOTES = 222,
	KEYS_OEM8 = 223,
	KEYS_SPACE_OEMTILDE = 224,
	KEYS_PRIOR_OEMTILDE = 225,
	KEYS_OEMBACKSLASH = 226,
	KEYS_LBUTTON_OEMBACKSLASH = 227,
	KEYS_HOME_OEMTILDE = 228,
	KEYS_PROCESSKEY = 229,
	KEYS_MBUTTON_OEMBACKSLASH = 230,
	KEYS_RBUTTON_PROCESSKEY = 231,
	KEYS_DOWN_OEMTILDE = 232,
	KEYS_SELECT_OEMTILDE = 233,
	KEYS_BACK_OEMBACKSLASH = 234,
	KEYS_TAB_OEMBACKSLASH = 235,
	KEYS_SNAPSHOT_OEMTILDE = 236,
	KEYS_BACK_PROCESSKEY = 237,
	KEYS_CLEAR_OEMBACKSLASH = 238,
	KEYS_LINEFEED_PROCESSKEY = 239,
	KEYS_D0_OEMTILDE = 240,
	KEYS_D1_OEMTILDE = 241,
	KEYS_SHIFTKEY_OEMBACKSLASH = 242,
	KEYS_CONTROLKEY_OEMBACKSLASH = 243,
	KEYS_D4_OEMTILDE = 244,
	KEYS_SHIFTKEY_PROCESSKEY = 245,
	KEYS_ATTN = 246,
	KEYS_CRSEL = 247,
	KEYS_EXSEL = 248,
	KEYS_ERASEEOF = 249,
	KEYS_PLAY = 250,
	KEYS_ZOOM = 251,
	KEYS_NONAME = 252,
	KEYS_PA1 = 253,
	KEYS_OEMCLEAR = 254,
	KEYS_LBUTTON_OEMCLEAR = 255,
}E_KEYS;

class CclsCultureInfo : public COleDispatchDriver
{
// Constructors
public:
	CclsCultureInfo() {}	
	CclsCultureInfo(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsCultureInfo(const CclsCultureInfo& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:

// Methods
public:
};

class CclsImage : public COleDispatchDriver
{
// Constructors
public:
	CclsImage() {}	
	CclsImage(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsImage(const CclsImage& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetWidth();
	LONG GetHeight();
	CString GetFilename();
	BOOL GetEmbeddedColorManagement();

// Methods
public:
	void FromFile(LPCTSTR Filename, BOOL UseEmbeddedColorManagement);
	void Clear(void);
	LONG hImage(void);
};

class CclsFont : public COleDispatchDriver
{
// Constructors
public:
	CclsFont() {}	
	CclsFont(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsFont(const CclsFont& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetFontName(LPCTSTR propval);
	CString GetFontName();
	void SetSize(FLOAT propval);
	FLOAT GetSize();
	void SetStyle(GRE_FONTSTYLE propval);
	GRE_FONTSTYLE GetStyle();
	void SetUnit(GRE_UNIT propval);
	GRE_UNIT GetUnit();

// Methods
public:
};

class CclsGDIGraphics : public COleDispatchDriver
{
// Constructors
public:
	CclsGDIGraphics() {}	
	CclsGDIGraphics(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsGDIGraphics(const CclsGDIGraphics& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:

// Methods
public:
	LONG GetHDC(void);
	void ReleaseHDC(LONG hdc);
	LONG StringWidth(LPCTSTR Text, LPDISPATCH Font, LONG hWnd);
	LONG StringHeight(LPCTSTR Text, LPDISPATCH Font, LONG hWnd);
	void SetLayoutRect(LONG X1, LONG Y1, LONG X2, LONG Y2);
};

class CclsPrinter : public COleDispatchDriver
{
// Constructors
public:
	CclsPrinter() {}	
	CclsPrinter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsPrinter(const CclsPrinter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetPrinterName(LPCTSTR propval);
	CString GetPrinterName();
	void SetPrinterResolution(GRE_PRINTERRESOLUTION propval);
	GRE_PRINTERRESOLUTION GetPrinterResolution();
	void SetHorizontalDPI(LONG propval);
	LONG GetHorizontalDPI();
	void SetVerticalDPI(LONG propval);
	LONG GetVerticalDPI();
	void SetPaperType(GRE_PAPERTYPE propval);
	GRE_PAPERTYPE GetPaperType();
	void SetOrientation(GRE_ORIENTATION propval);
	GRE_ORIENTATION GetOrientation();
	void SetMarginLeft(LONG propval);
	LONG GetMarginLeft();
	void SetMarginTop(LONG propval);
	LONG GetMarginTop();
	void SetMarginRight(LONG propval);
	LONG GetMarginRight();
	void SetMarginBottom(LONG propval);
	LONG GetMarginBottom();
	void SetScale(FLOAT propval);
	FLOAT GetScale();
	void SetHeadingsInEveryPage(BOOL propval);
	BOOL GetHeadingsInEveryPage();
	void SetColumnsInEveryPage(BOOL propval);
	BOOL GetColumnsInEveryPage();
	void SetColumns(LONG propval);
	LONG GetColumns();
	void SetKeepRowsTogether(BOOL propval);
	BOOL GetKeepRowsTogether();
	void SetKeepColumnsTogether(BOOL propval);
	BOOL GetKeepColumnsTogether();
	void SetKeepTimeIntervalsTogether(BOOL propval);
	BOOL GetKeepTimeIntervalsTogether();
	void SetShowAllColumns(BOOL propval);
	BOOL GetShowAllColumns();
	void SetInterval(E_INTERVAL propval);
	E_INTERVAL GetInterval();
	void SetFactor(LONG propval);
	LONG GetFactor();
	LONG GetPages();
	LONG GetXAxisPages();
	LONG GetYAxisPages();
	DATE GetPrintAreaEndDate();
	DATE GetPrintAreaStartDate();
	LONG GetStartRow();
	LONG GetEndRow();
	LONG GetPrintAreaWidth();
	LONG GetPrintAreaHeight();
	void SetPScale(FLOAT propval);
	FLOAT GetPScale();

// Methods
public:
	void Clear(void);
	void GetPagePosition(LONG PageNumber, LONG* Column, LONG* Row);
	LONG GetPageNumber(LONG Column, LONG Row);
	BOOL Initialize(DATE StartDate, DATE EndDate, LONG StartRow, LONG EndRow);
	void Terminate(void);
	void Calculate(void);
	void PrintAll(void);
	void PrintRange(LONG StartPage, LONG EndPage);
	void PrintPage(LONG PageNumber);
	void PreviewPage(LONG hdc, LONG PageNumber, FLOAT Scale, LONG X, LONG Y);
};

class CclsMath : public COleDispatchDriver
{
// Constructors
public:
	CclsMath() {}	
	CclsMath(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsMath(const CclsMath& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:

// Methods
public:
	DATE DateTimeAdd(E_INTERVAL Interval, LONG Number, DATE dtDate);
	LONG DateTimeDiff(E_INTERVAL Interval, DATE dtDate1, DATE dtDate2);
	LONG GetXCoordinateFromDate(DATE dtCoordinate);
	DATE GetDateFromXCoordinate(LONG v_lXCoordinate);
	LONG GetRowIndexByPosition(LONG Y);
	LONG GetCellIndexByPosition(LONG X);
	LONG GetColumnIndexByPosition(LONG X, LONG Y);
	LONG GetTaskIndexByPosition(LONG X, LONG Y);
	LONG GetPercentageIndexByPosition(LONG X, LONG Y);
	LONG GetNodeIndexByCheckBoxPosition(LONG X, LONG Y);
	LONG GetNodeIndexBySignPosition(LONG X, LONG Y);
	BOOL DetectConflict(DATE StartDate, DATE EndDate, LPCTSTR RowKey, LONG ExcludeIndex, LPCTSTR LayerIndex);
	DATE RoundDate(E_INTERVAL Interval, LONG Number, DATE dtDate);
	LONG RoundDouble(DOUBLE dParam);
	LONG GetPredecessorIndexByPosition(LONG X, LONG Y);
	LONG CalculateDuration(DATE dtStartDate, DATE dtEndDate, E_INTERVAL DurationInterval);
	DATE GetEndDate(DATE StartDate, E_INTERVAL DurationInterval, LONG DurationFactor);
};

class CclsCustomBorderStyle : public COleDispatchDriver
{
// Constructors
public:
	CclsCustomBorderStyle() {}	
	CclsCustomBorderStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsCustomBorderStyle(const CclsCustomBorderStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetLeft(BOOL propval);
	BOOL GetLeft();
	void SetTop(BOOL propval);
	BOOL GetTop();
	void SetRight(BOOL propval);
	BOOL GetRight();
	void SetBottom(BOOL propval);
	BOOL GetBottom();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTaskStyle : public COleDispatchDriver
{
// Constructors
public:
	CclsTaskStyle() {}	
	CclsTaskStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTaskStyle(const CclsTaskStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetEndBorderColor(unsigned long propval);
	unsigned long GetEndBorderColor();
	void SetEndFillColor(unsigned long propval);
	unsigned long GetEndFillColor();
	void SetStartBorderColor(unsigned long propval);
	unsigned long GetStartBorderColor();
	void SetStartFillColor(unsigned long propval);
	unsigned long GetStartFillColor();
	CclsImage GetStartImage();
	CclsImage GetMiddleImage();
	CclsImage GetEndImage();
	void SetStartShapeIndex(GRE_FIGURETYPE propval);
	GRE_FIGURETYPE GetStartShapeIndex();
	void SetEndShapeIndex(GRE_FIGURETYPE propval);
	GRE_FIGURETYPE GetEndShapeIndex();
	void SetStartImageTag(LPCTSTR propval);
	CString GetStartImageTag();
	void SetMiddleImageTag(LPCTSTR propval);
	CString GetMiddleImageTag();
	void SetEndImageTag(LPCTSTR propval);
	CString GetEndImageTag();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsMilestoneStyle : public COleDispatchDriver
{
// Constructors
public:
	CclsMilestoneStyle() {}	
	CclsMilestoneStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsMilestoneStyle(const CclsMilestoneStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetBorderColor(unsigned long propval);
	unsigned long GetBorderColor();
	void SetFillColor(unsigned long propval);
	unsigned long GetFillColor();
	void SetShapeIndex(GRE_FIGURETYPE propval);
	GRE_FIGURETYPE GetShapeIndex();
	CclsImage GetImage();
	void SetImageTag(LPCTSTR propval);
	CString GetImageTag();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsPredecessorStyle : public COleDispatchDriver
{
// Constructors
public:
	CclsPredecessorStyle() {}	
	CclsPredecessorStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsPredecessorStyle(const CclsPredecessorStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetLineColor(unsigned long propval);
	unsigned long GetLineColor();
	void SetXOffset(LONG propval);
	LONG GetXOffset();
	void SetYOffset(LONG propval);
	LONG GetYOffset();
	void SetLineWidth(LONG propval);
	LONG GetLineWidth();
	void SetLineStyle(GRE_LINEDRAWSTYLE propval);
	GRE_LINEDRAWSTYLE GetLineStyle();
	void SetArrowSize(LONG propval);
	LONG GetArrowSize();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTextFlags : public COleDispatchDriver
{
// Constructors
public:
	CclsTextFlags() {}	
	CclsTextFlags(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTextFlags(const CclsTextFlags& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetVerticalAlignment(GRE_VERTICALALIGNMENT propval);
	GRE_VERTICALALIGNMENT GetVerticalAlignment();
	void SetHorizontalAlignment(GRE_HORIZONTALALIGNMENT propval);
	GRE_HORIZONTALALIGNMENT GetHorizontalAlignment();
	void SetWordWrap(BOOL propval);
	BOOL GetWordWrap();
	void SetRightToLeft(BOOL propval);
	BOOL GetRightToLeft();
	void SetOffsetBottom(LONG propval);
	LONG GetOffsetBottom();
	void SetOffsetLeft(LONG propval);
	LONG GetOffsetLeft();
	void SetOffsetRight(LONG propval);
	LONG GetOffsetRight();
	void SetOffsetTop(LONG propval);
	LONG GetOffsetTop();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsButtonBorderStyle : public COleDispatchDriver
{
// Constructors
public:
	CclsButtonBorderStyle() {}	
	CclsButtonBorderStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsButtonBorderStyle(const CclsButtonBorderStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetRaisedExteriorLeftTopColor(unsigned long propval);
	unsigned long GetRaisedExteriorLeftTopColor();
	void SetRaisedInteriorLeftTopColor(unsigned long propval);
	unsigned long GetRaisedInteriorLeftTopColor();
	void SetRaisedExteriorRightBottomColor(unsigned long propval);
	unsigned long GetRaisedExteriorRightBottomColor();
	void SetRaisedInteriorRightBottomColor(unsigned long propval);
	unsigned long GetRaisedInteriorRightBottomColor();
	void SetSunkenExteriorLeftTopColor(unsigned long propval);
	unsigned long GetSunkenExteriorLeftTopColor();
	void SetSunkenInteriorLeftTopColor(unsigned long propval);
	unsigned long GetSunkenInteriorLeftTopColor();
	void SetSunkenExteriorRightBottomColor(unsigned long propval);
	unsigned long GetSunkenExteriorRightBottomColor();
	void SetSunkenInteriorRightBottomColor(unsigned long propval);
	unsigned long GetSunkenInteriorRightBottomColor();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsScrollBarStyle : public COleDispatchDriver
{
// Constructors
public:
	CclsScrollBarStyle() {}	
	CclsScrollBarStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsScrollBarStyle(const CclsScrollBarStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetArrowColor(unsigned long propval);
	unsigned long GetArrowColor();
	void SetDropShadowArrowColor(unsigned long propval);
	unsigned long GetDropShadowArrowColor();
	void SetDropShadow(BOOL propval);
	BOOL GetDropShadow();
	void SetLeftX(LONG propval);
	LONG GetLeftX();
	void SetLeftY(LONG propval);
	LONG GetLeftY();
	void SetUpX(LONG propval);
	LONG GetUpX();
	void SetUpY(LONG propval);
	LONG GetUpY();
	void SetRightX(LONG propval);
	LONG GetRightX();
	void SetRightY(LONG propval);
	LONG GetRightY();
	void SetDownX(LONG propval);
	LONG GetDownX();
	void SetDownY(LONG propval);
	LONG GetDownY();
	void SetDropShadowLeftX(LONG propval);
	LONG GetDropShadowLeftX();
	void SetDropShadowLeftY(LONG propval);
	LONG GetDropShadowLeftY();
	void SetDropShadowUpX(LONG propval);
	LONG GetDropShadowUpX();
	void SetDropShadowUpY(LONG propval);
	LONG GetDropShadowUpY();
	void SetDropShadowRightX(LONG propval);
	LONG GetDropShadowRightX();
	void SetDropShadowRightY(LONG propval);
	LONG GetDropShadowRightY();
	void SetDropShadowDownX(LONG propval);
	LONG GetDropShadowDownX();
	void SetDropShadowDownY(LONG propval);
	LONG GetDropShadowDownY();
	void SetArrowSize(LONG propval);
	LONG GetArrowSize();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsSelectionRectangleStyle : public COleDispatchDriver
{
// Constructors
public:
	CclsSelectionRectangleStyle() {}	
	CclsSelectionRectangleStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsSelectionRectangleStyle(const CclsSelectionRectangleStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetOffsetBottom(LONG propval);
	LONG GetOffsetBottom();
	void SetOffsetLeft(LONG propval);
	LONG GetOffsetLeft();
	void SetOffsetRight(LONG propval);
	LONG GetOffsetRight();
	void SetOffsetTop(LONG propval);
	LONG GetOffsetTop();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	void SetMode(E_SELECTIONRECTANGLEMODE propval);
	E_SELECTIONRECTANGLEMODE GetMode();
	void SetBorderWidth(LONG propval);
	LONG GetBorderWidth();
	void SetColor(unsigned long propval);
	unsigned long GetColor();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsStyle : public COleDispatchDriver
{
// Constructors
public:
	CclsStyle() {}	
	CclsStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsStyle(const CclsStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetHatchBackColor(unsigned long propval);
	unsigned long GetHatchBackColor();
	void SetHatchForeColor(unsigned long propval);
	unsigned long GetHatchForeColor();
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetAppearance(E_STYLEAPPEARANCE propval);
	E_STYLEAPPEARANCE GetAppearance();
	void SetBackColor(unsigned long propval);
	unsigned long GetBackColor();
	void SetPattern(GRE_PATTERN propval);
	GRE_PATTERN GetPattern();
	void SetBorderColor(unsigned long propval);
	unsigned long GetBorderColor();
	void SetBorderStyle(GRE_BORDERSTYLE propval);
	GRE_BORDERSTYLE GetBorderStyle();
	void SetButtonStyle(GRE_BUTTONSTYLE propval);
	GRE_BUTTONSTYLE GetButtonStyle();
	void SetTextAlignmentHorizontal(GRE_HORIZONTALALIGNMENT propval);
	GRE_HORIZONTALALIGNMENT GetTextAlignmentHorizontal();
	void SetTextAlignmentVertical(GRE_VERTICALALIGNMENT propval);
	GRE_VERTICALALIGNMENT GetTextAlignmentVertical();
	void SetTextVisible(BOOL propval);
	BOOL GetTextVisible();
	void SetTextXMargin(LONG propval);
	LONG GetTextXMargin();
	void SetTextYMargin(LONG propval);
	LONG GetTextYMargin();
	void SetClipText(BOOL propval);
	BOOL GetClipText();
	CclsFont GetFont();
	void SetForeColor(unsigned long propval);
	unsigned long GetForeColor();
	void SetOffsetBottom(LONG propval);
	LONG GetOffsetBottom();
	void SetOffsetTop(LONG propval);
	LONG GetOffsetTop();
	void SetImageAlignmentHorizontal(GRE_HORIZONTALALIGNMENT propval);
	GRE_HORIZONTALALIGNMENT GetImageAlignmentHorizontal();
	void SetImageAlignmentVertical(GRE_VERTICALALIGNMENT propval);
	GRE_VERTICALALIGNMENT GetImageAlignmentVertical();
	void SetImageXMargin(LONG propval);
	LONG GetImageXMargin();
	void SetImageYMargin(LONG propval);
	LONG GetImageYMargin();
	void SetPlacement(E_PLACEMENT propval);
	E_PLACEMENT GetPlacement();
	void SetUseMask(BOOL propval);
	BOOL GetUseMask();
	void SetTextPlacement(E_TEXTPLACEMENT propval);
	E_TEXTPLACEMENT GetTextPlacement();
	void SetPatternFactor(LONG propval);
	LONG GetPatternFactor();
	void SetHatchStyle(GRE_HATCHSTYLE propval);
	GRE_HATCHSTYLE GetHatchStyle();
	void SetStartGradientColor(unsigned long propval);
	unsigned long GetStartGradientColor();
	void SetEndGradientColor(unsigned long propval);
	unsigned long GetEndGradientColor();
	void SetGradientFillMode(GRE_GRADIENTFILLMODE propval);
	GRE_GRADIENTFILLMODE GetGradientFillMode();
	void SetFillMode(GRE_FILLMODE propval);
	GRE_FILLMODE GetFillMode();
	void SetBackgroundMode(GRE_BACKGROUNDMODE propval);
	GRE_BACKGROUNDMODE GetBackgroundMode();
	void SetDrawTextInVisibleArea(BOOL propval);
	BOOL GetDrawTextInVisibleArea();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	CclsTaskStyle GetTaskStyle();
	CclsMilestoneStyle GetMilestoneStyle();
	CclsPredecessorStyle GetPredecessorStyle();
	CclsTextFlags GetTextFlags();
	CclsCustomBorderStyle GetCustomBorderStyle();
	LONG GetIndex();
	void SetBorderWidth(LONG propval);
	LONG GetBorderWidth();
	CclsScrollBarStyle GetScrollBarStyle();
	CclsSelectionRectangleStyle GetSelectionRectangleStyle();
	CclsButtonBorderStyle GetButtonBorderStyle();
	void SetTextEditBackColor(unsigned long propval);
	unsigned long GetTextEditBackColor();
	void SetTextEditForeColor(unsigned long propval);
	unsigned long GetTextEditForeColor();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	void Clear(void);
	CclsStyle Clone(LPCTSTR Key);
};

class CclsStyles : public COleDispatchDriver
{
// Constructors
public:
	CclsStyles() {}	
	CclsStyles(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsStyles(const CclsStyles& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsStyle Item(LPCTSTR Index);
	CclsStyle Add(LPCTSTR Key);
	void Clear(void);
	void Remove(LPCTSTR Index);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	BOOL ContainsKey(LPCTSTR Key);
};

class CclsButtonState : public COleDispatchDriver
{
// Constructors
public:
	CclsButtonState() {}	
	CclsButtonState(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsButtonState(const CclsButtonState& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetNormalStyleIndex(LPCTSTR propval);
	CString GetNormalStyleIndex();
	CclsStyle GetNormalStyle();
	void SetPressedStyleIndex(LPCTSTR propval);
	CString GetPressedStyleIndex();
	CclsStyle GetPressedStyle();
	void SetDisabledStyleIndex(LPCTSTR propval);
	CString GetDisabledStyleIndex();
	CclsStyle GetDisabledStyle();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsVScrollBarTemplate : public COleDispatchDriver
{
// Constructors
public:
	CclsVScrollBarTemplate() {}	
	CclsVScrollBarTemplate(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsVScrollBarTemplate(const CclsVScrollBarTemplate& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetTimerInterval(LONG propval);
	LONG GetTimerInterval();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	CclsButtonState GetArrowButtons();
	CclsButtonState GetThumbButton();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsHScrollBarTemplate : public COleDispatchDriver
{
// Constructors
public:
	CclsHScrollBarTemplate() {}	
	CclsHScrollBarTemplate(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsHScrollBarTemplate(const CclsHScrollBarTemplate& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetTimerInterval(LONG propval);
	LONG GetTimerInterval();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	CclsButtonState GetArrowButtons();
	CclsButtonState GetThumbButton();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsScrollBarSeparator : public COleDispatchDriver
{
// Constructors
public:
	CclsScrollBarSeparator() {}	
	CclsScrollBarSeparator(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsScrollBarSeparator(const CclsScrollBarSeparator& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsVerticalScrollBar : public COleDispatchDriver
{
// Constructors
public:
	CclsVerticalScrollBar() {}	
	CclsVerticalScrollBar(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsVerticalScrollBar(const CclsVerticalScrollBar& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetMin();
	LONG GetMax();
	void SetValue(LONG propval);
	LONG GetValue();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	void SetSmallChange(LONG propval);
	LONG GetSmallChange();
	void SetLargeChange(LONG propval);
	LONG GetLargeChange();
	CclsVScrollBarTemplate GetScrollBar();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsHorizontalScrollBar : public COleDispatchDriver
{
// Constructors
public:
	CclsHorizontalScrollBar() {}	
	CclsHorizontalScrollBar(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsHorizontalScrollBar(const CclsHorizontalScrollBar& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetMin();
	LONG GetMax();
	void SetValue(LONG propval);
	LONG GetValue();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	void SetSmallChange(LONG propval);
	LONG GetSmallChange();
	void SetLargeChange(LONG propval);
	LONG GetLargeChange();
	CclsHScrollBarTemplate GetScrollBar();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsSplitter : public COleDispatchDriver
{
// Constructors
public:
	CclsSplitter() {}	
	CclsSplitter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsSplitter(const CclsSplitter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetAppearance(E_BORDERSTYLE propval);
	E_BORDERSTYLE GetAppearance();
	void SetPosition(LONG propval);
	LONG GetPosition();
	void SetType(E_SPLITTERTYPE propval);
	E_SPLITTERTYPE GetType();
	void SetWidth(LONG propval);
	LONG GetWidth();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetOffset(LONG propval);
	LONG GetOffset();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	void SetColor(LONG Index, unsigned long oColor);
	unsigned long GetColor(LONG Index);
};

class CclsTreeview : public COleDispatchDriver
{
// Constructors
public:
	CclsTreeview() {}	
	CclsTreeview(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTreeview(const CclsTreeview& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetFirstVisibleNode(LONG propval);
	LONG GetFirstVisibleNode();
	LONG GetLastVisibleNode();
	void SetIndentation(LONG propval);
	LONG GetIndentation();
	void SetCheckBoxBorderColor(unsigned long propval);
	unsigned long GetCheckBoxBorderColor();
	void SetCheckBoxBackColor(unsigned long propval);
	unsigned long GetCheckBoxBackColor();
	void SetCheckBoxMarkColor(unsigned long propval);
	unsigned long GetCheckBoxMarkColor();
	void SetBackColor(unsigned long propval);
	unsigned long GetBackColor();
	void SetPathSeparator(LPCTSTR propval);
	CString GetPathSeparator();
	void SetTreeLines(BOOL propval);
	BOOL GetTreeLines();
	void SetTreeviewMode(E_TREEVIEWMODE propval);
	E_TREEVIEWMODE GetTreeviewMode();
	void SetImages(BOOL propval);
	BOOL GetImages();
	void SetCheckBoxes(BOOL propval);
	BOOL GetCheckBoxes();
	void SetFullColumnSelect(BOOL propval);
	BOOL GetFullColumnSelect();
	void SetExpansionOnSelection(BOOL propval);
	BOOL GetExpansionOnSelection();
	void SetSelectedBackColor(unsigned long propval);
	unsigned long GetSelectedBackColor();
	void SetSelectedForeColor(unsigned long propval);
	unsigned long GetSelectedForeColor();
	void SetTreeLineColor(unsigned long propval);
	unsigned long GetTreeLineColor();
	void SetPlusMinusBorderColor(unsigned long propval);
	unsigned long GetPlusMinusBorderColor();
	void SetPlusMinusSignColor(unsigned long propval);
	unsigned long GetPlusMinusSignColor();
	void SetCheckBoxBackgroundMode(GRE_BACKGROUNDMODE propval);
	GRE_BACKGROUNDMODE GetCheckBoxBackgroundMode();
	void SetPlusMinusBackColor(unsigned long propval);
	unsigned long GetPlusMinusBackColor();
	void SetPlusMinusBackgroundMode(GRE_BACKGROUNDMODE propval);
	GRE_BACKGROUNDMODE GetPlusMinusBackgroundMode();
	void SetExpandIconForeColor(unsigned long propval);
	unsigned long GetExpandIconForeColor();
	void SetExpandIconBackColor(unsigned long propval);
	unsigned long GetExpandIconBackColor();
	void SetExpandIconDropShadowColor(unsigned long propval);
	unsigned long GetExpandIconDropShadowColor();
	void SetCollapseIconForeColor(unsigned long propval);
	unsigned long GetCollapseIconForeColor();
	void SetCollapseIconDropShadowColor(unsigned long propval);
	unsigned long GetCollapseIconDropShadowColor();

// Methods
public:
	void ClearSelections(void);
	void SetXML(LPCTSTR sXML);
	CString GetXML(void);
};

class CclsToolTip : public COleDispatchDriver
{
// Constructors
public:
	CclsToolTip() {}	
	CclsToolTip(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsToolTip(const CclsToolTip& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	CclsFont GetFont();
	void SetBackColor(unsigned long propval);
	unsigned long GetBackColor();
	void SetForeColor(unsigned long propval);
	unsigned long GetForeColor();
	void SetBorderColor(unsigned long propval);
	unsigned long GetBorderColor();
	void SetText(LPCTSTR propval);
	CString GetText();
	void SetAutomaticSizing(BOOL propval);
	BOOL GetAutomaticSizing();
	void SetLeft(LONG propval);
	LONG GetLeft();
	LONG GetRight();
	void SetTop(LONG propval);
	LONG GetTop();
	LONG GetBottom();
	void SetWidth(LONG propval);
	LONG GetWidth();
	void SetHeight(LONG propval);
	LONG GetHeight();
	void SetVisible(BOOL propval);
	BOOL GetVisible();

// Methods
public:
};

class CclsLayer : public COleDispatchDriver
{
// Constructors
public:
	CclsLayer() {}	
	CclsLayer(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsLayer(const CclsLayer& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	LONG GetIndex();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsLayers : public COleDispatchDriver
{
// Constructors
public:
	CclsLayers() {}	
	CclsLayers(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsLayers(const CclsLayers& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsLayer Item(LPCTSTR Index);
	CclsLayer Add(LPCTSTR Key, BOOL Visible);
	void Clear(void);
	void Remove(LPCTSTR Index);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsNode : public COleDispatchDriver
{
// Constructors
public:
	CclsNode() {}	
	CclsNode(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsNode(const CclsNode& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LPDISPATCH GetRow();
	void SetCheckBoxVisible(BOOL propval);
	BOOL GetCheckBoxVisible();
	void SetImageVisible(BOOL propval);
	BOOL GetImageVisible();
	LONG GetLeft();
	LONG GetTop();
	LONG GetBottom();
	void SetDepth(LONG propval);
	LONG GetDepth();
	void SetExpanded(BOOL propval);
	BOOL GetExpanded();
	void SetSelected(BOOL propval);
	BOOL GetSelected();
	CclsImage GetExpandedImage();
	CclsImage GetSelectedImage();
	CclsImage GetImage();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	void SetText(LPCTSTR propval);
	CString GetText();
	void SetChecked(BOOL propval);
	BOOL GetChecked();
	void SetHeight(LONG propval);
	LONG GetHeight();
	BOOL GetHidden();
	void SetExpandedImageTag(LPCTSTR propval);
	CString GetExpandedImageTag();
	void SetSelectedImageTag(LPCTSTR propval);
	CString GetSelectedImageTag();
	void SetImageTag(LPCTSTR propval);
	CString GetImageTag();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetAllowTextEdit(BOOL propval);
	BOOL GetAllowTextEdit();

// Methods
public:
	CclsNode NextSibling(void);
	CclsNode PreviousSibling(void);
	BOOL IsFirstSibling(void);
	CclsNode FirstSibling(void);
	BOOL IsLastSibling(void);
	CclsNode LastSibling(void);
	CclsNode Child(void);
	CclsNode Parent(void);
	BOOL IsRoot(void);
	CString FullPath(void);
	LONG Children(void);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsRow;


class CclsCell : public COleDispatchDriver
{
// Constructors
public:
	CclsCell() {}	
	CclsCell(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsCell(const CclsCell& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	CclsRow GetRow();
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetText(LPCTSTR propval);
	CString GetText();
	CclsImage GetImage();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	CString GetRowKey();
	LONG GetLeft();
	LONG GetTop();
	LONG GetRight();
	LONG GetBottom();
	LONG GetLeftTrim();
	LONG GetRightTrim();
	LONG GetIndex();
	void SetImageTag(LPCTSTR propval);
	CString GetImageTag();
	void SetAllowTextEdit(BOOL propval);
	BOOL GetAllowTextEdit();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsCells : public COleDispatchDriver
{
// Constructors
public:
	CclsCells() {}	
	CclsCells(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsCells(const CclsCells& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsCell Item(LPCTSTR Index);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsRow : public COleDispatchDriver
{
// Constructors
public:
	CclsRow() {}	
	CclsRow(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsRow(const CclsRow& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetAllowMove(BOOL propval);
	BOOL GetAllowMove();
	void SetAllowSize(BOOL propval);
	BOOL GetAllowSize();
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetContainer(BOOL propval);
	BOOL GetContainer();
	void SetUseNodeImages(BOOL propval);
	BOOL GetUseNodeImages();
	void SetMergeCells(BOOL propval);
	BOOL GetMergeCells();
	void SetHeight(LONG propval);
	LONG GetHeight();
	void SetText(LPCTSTR propval);
	CString GetText();
	CclsImage GetImage();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	void SetClientAreaStyleIndex(LPCTSTR propval);
	CString GetClientAreaStyleIndex();
	CclsStyle GetClientAreaStyle();
	LONG GetLeft();
	LONG GetTop();
	LONG GetRight();
	LONG GetBottom();
	BOOL GetVisible();
	CclsNode GetNode();
	CclsCells GetCells();
	LONG GetIndex();
	void SetImageTag(LPCTSTR propval);
	CString GetImageTag();
	void SetAllowTextEdit(BOOL propval);
	BOOL GetAllowTextEdit();
	void SetHighlighted(BOOL propval);
	BOOL GetHighlighted();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsRows : public COleDispatchDriver
{
// Constructors
public:
	CclsRows() {}	
	CclsRows(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsRows(const CclsRows& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsRow Item(LPCTSTR Index);
	void Clear(void);
	void Remove(LPCTSTR Index);
	void MoveRow(LONG OriginRowIndex, LONG DestRowIndex);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	CclsRow Add(LPCTSTR Key, LPCTSTR Text, BOOL MergeCells, BOOL Container, LPCTSTR StyleIndex);
	void SortRows(LPCTSTR PropertyName, BOOL Descending, E_SORTTYPE SortType, LONG StartIndex, LONG EndIndex);
	void SortCells(LONG CellIndex, LPCTSTR PropertyName, BOOL Descending, E_SORTTYPE SortType, LONG StartIndex, LONG EndIndex);
	void UpdateTree(void);
	void BeginLoad(BOOL Preserve);
	CclsRow Load(LPCTSTR sKey);
	void EndLoad(void);
	BOOL VerifyTree(void);
};

class CclsTask;


class CclsPredecessor : public COleDispatchDriver
{
// Constructors
public:
	CclsPredecessor() {}	
	CclsPredecessor(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsPredecessor(const CclsPredecessor& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	void SetPredecessorKey(LPCTSTR propval);
	CString GetPredecessorKey();
	CclsTask GetPredecessorTask();
	void SetPredecessorType(E_CONSTRAINTTYPE propval);
	E_CONSTRAINTTYPE GetPredecessorType();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	LONG GetIndex();
	void SetSuccessorKey(LPCTSTR propval);
	CString GetSuccessorKey();
	CclsTask GetSuccessorTask();
	void SetLagInterval(E_INTERVAL propval);
	E_INTERVAL GetLagInterval();
	void SetLagFactor(LONG propval);
	LONG GetLagFactor();
	BOOL GetWarning();
	void SetWarningStyleIndex(LPCTSTR propval);
	CString GetWarningStyleIndex();
	CclsStyle GetWarningStyle();
	void SetSelectedStyleIndex(LPCTSTR propval);
	CString GetSelectedStyleIndex();
	CclsStyle GetSelectedStyle();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsPredecessors : public COleDispatchDriver
{
// Constructors
public:
	CclsPredecessors() {}	
	CclsPredecessors(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsPredecessors(const CclsPredecessors& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsPredecessor Item(LPCTSTR Index);
	CclsPredecessor Add(LPCTSTR SuccessorKey, LPCTSTR PredecessorKey, E_CONSTRAINTTYPE PredecessorType, LPCTSTR Key, LPCTSTR StyleIndex);
	void Clear(void);
	void Remove(LPCTSTR Index);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTask : public COleDispatchDriver
{
// Constructors
public:
	CclsTask() {}	
	CclsTask(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTask(const CclsTask& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetIncomingPredecessors(BOOL propval);
	BOOL GetIncomingPredecessors();
	void SetOutgoingPredecessors(BOOL propval);
	BOOL GetOutgoingPredecessors();
	void SetAllowStretchLeft(BOOL propval);
	BOOL GetAllowStretchLeft();
	void SetAllowStretchRight(BOOL propval);
	BOOL GetAllowStretchRight();
	void SetText(LPCTSTR propval);
	CString GetText();
	void SetLayerIndex(LPCTSTR propval);
	CString GetLayerIndex();
	CclsLayer GetLayer();
	CclsImage GetImage();
	void SetRowKey(LPCTSTR propval);
	CString GetRowKey();
	CclsRow GetRow();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	void SetAllowedMovement(E_MOVEMENTTYPE propval);
	E_MOVEMENTTYPE GetAllowedMovement();
	LONG GetLeftTrim();
	LONG GetRightTrim();
	void SetStartDate(DATE propval);
	DATE GetStartDate();
	LONG GetLeft();
	LONG GetRight();
	void SetEndDate(DATE propval);
	DATE GetEndDate();
	LONG GetTop();
	LONG GetBottom();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	E_OBJECTTYPE GetType();
	LONG GetIndex();
	void SetImageTag(LPCTSTR propval);
	CString GetImageTag();
	void SetAllowTextEdit(BOOL propval);
	BOOL GetAllowTextEdit();
	BOOL GetWarning();
	void SetWarningStyleIndex(LPCTSTR propval);
	CString GetWarningStyleIndex();
	CclsStyle GetWarningStyle();
	void SetTaskType(E_TASKTYPE propval);
	E_TASKTYPE GetTaskType();
	void SetDurationInterval(E_INTERVAL propval);
	E_INTERVAL GetDurationInterval();
	void SetDurationFactor(LONG propval);
	LONG GetDurationFactor();

// Methods
public:
	BOOL InConflict(void);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTasks : public COleDispatchDriver
{
// Constructors
public:
	CclsTasks() {}	
	CclsTasks(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTasks(const CclsTasks& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsTask Item(LPCTSTR Index);
	CclsTask Add(LPCTSTR Text, LPCTSTR RowKey, DATE StartDate, DATE EndDate, LPCTSTR Key, LPCTSTR StyleIndex, LPCTSTR LayerIndex);
	void Clear(void);
	void Remove(LPCTSTR Index);
	void Sort(LPCTSTR PropertyName, BOOL Descending, E_SORTTYPE SortType, LONG StartIndex, LONG EndIndex);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	void BeginLoad(BOOL Preserve);
	CclsTask Load(LPCTSTR sRowKey, LPCTSTR sKey);
	void EndLoad(void);
	CclsTask DAdd(LPCTSTR RowKey, DATE StartDate, E_INTERVAL DurationInterval, LONG DurationFactor, LPCTSTR Text, LPCTSTR Key, LPCTSTR StyleIndex, LPCTSTR LayerIndex);
};

class CclsTimeBlock : public COleDispatchDriver
{
// Constructors
public:
	CclsTimeBlock() {}	
	CclsTimeBlock(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTimeBlock(const CclsTimeBlock& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetTimeBlockType(E_TIMEBLOCKTYPE propval);
	E_TIMEBLOCKTYPE GetTimeBlockType();
	void SetRecurringType(E_RECURRINGTYPE propval);
	E_RECURRINGTYPE GetRecurringType();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	void SetGenerateConflict(BOOL propval);
	BOOL GetGenerateConflict();
	LONG GetLeftTrim();
	LONG GetRightTrim();
	LONG GetLeft();
	LONG GetTop();
	LONG GetRight();
	LONG GetBottom();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	LONG GetIndex();
	void SetBaseDate(DATE propval);
	DATE GetBaseDate();
	void SetBaseWeekDay(E_WEEKDAY propval);
	E_WEEKDAY GetBaseWeekDay();
	void SetDurationInterval(E_INTERVAL propval);
	E_INTERVAL GetDurationInterval();
	void SetDurationFactor(LONG propval);
	LONG GetDurationFactor();
	void SetNonWorking(BOOL propval);
	BOOL GetNonWorking();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTimeBlocks : public COleDispatchDriver
{
// Constructors
public:
	CclsTimeBlocks() {}	
	CclsTimeBlocks(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTimeBlocks(const CclsTimeBlocks& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();
	void SetIntervalStart(DATE propval);
	DATE GetIntervalStart();
	void SetIntervalEnd(DATE propval);
	DATE GetIntervalEnd();
	void SetIntervalType(E_TBINTERVALTYPE propval);
	E_TBINTERVALTYPE GetIntervalType();

// Methods
public:
	CclsTimeBlock Item(LPCTSTR Index);
	void Clear(void);
	void Remove(LPCTSTR Index);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	CclsTimeBlock Add(LPCTSTR Key);
	void CalculateInterval(void);
	CString CP_GetXML(void);
	void CP_SetXML(LPCTSTR sXML);
};

class CclsColumn : public COleDispatchDriver
{
// Constructors
public:
	CclsColumn() {}	
	CclsColumn(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsColumn(const CclsColumn& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetAllowMove(BOOL propval);
	BOOL GetAllowMove();
	void SetAllowSize(BOOL propval);
	BOOL GetAllowSize();
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetWidth(LONG propval);
	LONG GetWidth();
	void SetText(LPCTSTR propval);
	CString GetText();
	CclsImage GetImage();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	LONG GetLeftTrim();
	LONG GetRightTrim();
	LONG GetLeft();
	LONG GetTop();
	LONG GetRight();
	LONG GetBottom();
	BOOL GetVisible();
	LONG GetIndex();
	void SetImageTag(LPCTSTR propval);
	CString GetImageTag();
	void SetAllowTextEdit(BOOL propval);
	BOOL GetAllowTextEdit();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsColumns : public COleDispatchDriver
{
// Constructors
public:
	CclsColumns() {}	
	CclsColumns(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsColumns(const CclsColumns& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsColumn Item(LPCTSTR Index);
	CclsColumn Add(LPCTSTR Text, LPCTSTR Key, LONG Width, LPCTSTR StyleIndex);
	void Clear(void);
	void Remove(LPCTSTR Index);
	void MoveColumn(LONG OriginColumnIndex, LONG DestColumnIndex);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsDrawing : public COleDispatchDriver
{
// Constructors
public:
	CclsDrawing() {}	
	CclsDrawing(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsDrawing(const CclsDrawing& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	CclsTextFlags GetTextFlags();
	CclsImage GetImage();
	CclsFont GetFont();

// Methods
public:
	CclsGDIGraphics GraphicsInfo(void);
	void DrawLine(LONG X1, LONG Y1, LONG X2, LONG Y2, unsigned long LineColor, GRE_LINEDRAWSTYLE LineStyle, LONG LineWidth);
	void DrawBorder(LONG X1, LONG Y1, LONG X2, LONG Y2, unsigned long LineColor, GRE_LINEDRAWSTYLE LineStyle, LONG LineWidth);
	void DrawRectangle(LONG X1, LONG Y1, LONG X2, LONG Y2, unsigned long LineColor, GRE_LINEDRAWSTYLE LineStyle, LONG LineWidth);
	void DrawText(LONG X1, LONG Y1, LONG X2, LONG Y2, LPCTSTR Text, unsigned long TextColor, LPDISPATCH TextFont);
	void DrawAlignedText(LONG X1, LONG Y1, LONG X2, LONG Y2, LPCTSTR Text, GRE_HORIZONTALALIGNMENT HorizontalAlignment, GRE_VERTICALALIGNMENT VerticalAlignment, unsigned long TextColor, LPDISPATCH TextFont);
	void PaintImage(LPDISPATCH Image, LONG X1, LONG Y1, LONG X2, LONG Y2);
	void DrawObject(LONG X1, LONG Y1, LONG X2, LONG Y2, LPCTSTR StyleIndex, LPCTSTR Text, BOOL Selected, LPDISPATCH Image, GRE_DRAWINGOBJECT ObjectType);
};

class CclsPercentage : public COleDispatchDriver
{
// Constructors
public:
	CclsPercentage() {}	
	CclsPercentage(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsPercentage(const CclsPercentage& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetAllowSize(BOOL propval);
	BOOL GetAllowSize();
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetPercent(FLOAT propval);
	FLOAT GetPercent();
	void SetTaskKey(LPCTSTR propval);
	CString GetTaskKey();
	CclsTask GetTask();
	CclsLayer GetLayer();
	void SetFormat(LPCTSTR propval);
	CString GetFormat();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	LONG GetLeftTrim();
	LONG GetRightTrim();
	LONG GetLeft();
	LONG GetTop();
	LONG GetBottom();
	LONG GetRight();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	LONG GetIndex();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	CString ToString(void);
};

class CclsPercentages : public COleDispatchDriver
{
// Constructors
public:
	CclsPercentages() {}	
	CclsPercentages(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsPercentages(const CclsPercentages& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsPercentage Item(LPCTSTR Index);
	CclsPercentage Add(LPCTSTR TaskKey, LPCTSTR StyleIndex, FLOAT Percent, LPCTSTR Key);
	void Clear(void);
	void Remove(LPCTSTR Index);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsGrid : public COleDispatchDriver
{
// Constructors
public:
	CclsGrid() {}	
	CclsGrid(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsGrid(const CclsGrid& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetVerticalLines(BOOL propval);
	BOOL GetVerticalLines();
	void SetSnapToGrid(BOOL propval);
	BOOL GetSnapToGrid();
	void SetSnapToGridOnSelection(BOOL propval);
	BOOL GetSnapToGridOnSelection();
	void SetColor(unsigned long propval);
	unsigned long GetColor();
	void SetInterval(E_INTERVAL propval);
	E_INTERVAL GetInterval();
	void SetFactor(LONG propval);
	LONG GetFactor();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsClientArea : public COleDispatchDriver
{
// Constructors
public:
	CclsClientArea() {}	
	CclsClientArea(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsClientArea(const CclsClientArea& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetDetectConflicts(BOOL propval);
	BOOL GetDetectConflicts();
	void SetMilestoneSelectionOffset(LONG propval);
	LONG GetMilestoneSelectionOffset();
	void SetFirstVisibleRow(LONG propval);
	LONG GetFirstVisibleRow();
	LONG GetLastVisibleRow();
	void SetToolTipFormat(LPCTSTR propval);
	CString GetToolTipFormat();
	void SetToolTipsVisible(BOOL propval);
	BOOL GetToolTipsVisible();
	LONG GetTop();
	LONG GetBottom();
	LONG GetLeft();
	LONG GetRight();
	LONG GetWidth();
	LONG GetHeight();
	CclsGrid GetGrid();
	void SetPredecessorSelectionOffset(LONG propval);
	LONG GetPredecessorSelectionOffset();
	void SetTaskBorderSelectionOffset(LONG propval);
	LONG GetTaskBorderSelectionOffset();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTimeLineScrollBar : public COleDispatchDriver
{
// Constructors
public:
	CclsTimeLineScrollBar() {}	
	CclsTimeLineScrollBar(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTimeLineScrollBar(const CclsTimeLineScrollBar& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetInterval(E_INTERVAL propval);
	E_INTERVAL GetInterval();
	void SetValue(LONG propval);
	LONG GetValue();
	void SetEnabled(BOOL propval);
	BOOL GetEnabled();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	void SetLargeChange(LONG propval);
	LONG GetLargeChange();
	void SetMax(LONG propval);
	LONG GetMax();
	void SetSmallChange(LONG propval);
	LONG GetSmallChange();
	void SetStartDate(DATE propval);
	DATE GetStartDate();
	CclsHScrollBarTemplate GetScrollBar();
	void SetFactor(LONG propval);
	LONG GetFactor();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTier : public COleDispatchDriver
{
// Constructors
public:
	CclsTier() {}	
	CclsTier(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTier(const CclsTier& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	void SetInterval(E_INTERVAL propval);
	E_INTERVAL GetInterval();
	void SetTierType(E_TIERTYPE propval);
	E_TIERTYPE GetTierType();
	void SetHeight(LONG propval);
	LONG GetHeight();
	void SetFactor(LONG propval);
	LONG GetFactor();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetBackgroundMode(E_TIERBACKGROUNDMODE propval);
	E_TIERBACKGROUNDMODE GetBackgroundMode();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTierFormat : public COleDispatchDriver
{
// Constructors
public:
	CclsTierFormat() {}	
	CclsTierFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTierFormat(const CclsTierFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetMinuteIntervalFormat(LPCTSTR propval);
	CString GetMinuteIntervalFormat();
	void SetHourIntervalFormat(LPCTSTR propval);
	CString GetHourIntervalFormat();
	void SetDayIntervalFormat(LPCTSTR propval);
	CString GetDayIntervalFormat();
	void SetDayOfWeekIntervalFormat(LPCTSTR propval);
	CString GetDayOfWeekIntervalFormat();
	void SetDayOfYearIntervalFormat(LPCTSTR propval);
	CString GetDayOfYearIntervalFormat();
	void SetWeekIntervalFormat(LPCTSTR propval);
	CString GetWeekIntervalFormat();
	void SetMonthIntervalFormat(LPCTSTR propval);
	CString GetMonthIntervalFormat();
	void SetQuarterIntervalFormat(LPCTSTR propval);
	CString GetQuarterIntervalFormat();
	void SetYearIntervalFormat(LPCTSTR propval);
	CString GetYearIntervalFormat();
	void SetSecondIntervalFormat(LPCTSTR propval);
	CString GetSecondIntervalFormat();
	void SetMillisecondIntervalFormat(LPCTSTR propval);
	CString GetMillisecondIntervalFormat();
	void SetMicrosecondIntervalFormat(LPCTSTR propval);
	CString GetMicrosecondIntervalFormat();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTierColor : public COleDispatchDriver
{
// Constructors
public:
	CclsTierColor() {}	
	CclsTierColor(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTierColor(const CclsTierColor& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetForeColor(unsigned long propval);
	unsigned long GetForeColor();
	void SetBackColor(unsigned long propval);
	unsigned long GetBackColor();
	LONG GetIndex();
	void SetStartGradientColor(unsigned long propval);
	unsigned long GetStartGradientColor();
	void SetEndGradientColor(unsigned long propval);
	unsigned long GetEndGradientColor();
	void SetHatchBackColor(unsigned long propval);
	unsigned long GetHatchBackColor();
	void SetHatchForeColor(unsigned long propval);
	unsigned long GetHatchForeColor();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTierColors : public COleDispatchDriver
{
// Constructors
public:
	CclsTierColors() {}	
	CclsTierColors(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTierColors(const CclsTierColors& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsTierColor Item(LPCTSTR Index);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTierAppearance : public COleDispatchDriver
{
// Constructors
public:
	CclsTierAppearance() {}	
	CclsTierAppearance(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTierAppearance(const CclsTierAppearance& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	CclsTierColors GetMinuteColors();
	CclsTierColors GetHourColors();
	CclsTierColors GetDayColors();
	CclsTierColors GetDayOfWeekColors();
	CclsTierColors GetDayOfYearColors();
	CclsTierColors GetWeekColors();
	CclsTierColors GetMonthColors();
	CclsTierColors GetQuarterColors();
	CclsTierColors GetYearColors();
	CclsTierColors GetSecondColors();
	CclsTierColors GetMillisecondColors();
	CclsTierColors GetMicrosecondColors();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTierArea : public COleDispatchDriver
{
// Constructors
public:
	CclsTierArea() {}	
	CclsTierArea(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTierArea(const CclsTierArea& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	CclsTier GetUpperTier();
	CclsTier GetMiddleTier();
	CclsTier GetLowerTier();
	CclsTierFormat GetTierFormat();
	CclsTierAppearance GetTierAppearance();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTickMark : public COleDispatchDriver
{
// Constructors
public:
	CclsTickMark() {}	
	CclsTickMark(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTickMark(const CclsTickMark& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetKey(LPCTSTR propval);
	CString GetKey();
	void SetDisplayText(BOOL propval);
	BOOL GetDisplayText();
	void SetTextFormat(LPCTSTR propval);
	CString GetTextFormat();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	void SetInterval(E_INTERVAL propval);
	E_INTERVAL GetInterval();
	void SetTickMarkType(E_TICKMARKTYPES propval);
	E_TICKMARKTYPES GetTickMarkType();
	LONG GetIndex();
	void SetFactor(LONG propval);
	LONG GetFactor();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsTickMarks : public COleDispatchDriver
{
// Constructors
public:
	CclsTickMarks() {}	
	CclsTickMarks(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTickMarks(const CclsTickMarks& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsTickMark Item(LPCTSTR Index);
	void Clear(void);
	void Remove(LPCTSTR Index);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	CclsTickMark Add(E_INTERVAL Interval, LONG Factor, E_TICKMARKTYPES TickMarkType, BOOL DisplayText, LPCTSTR TextFormat, LPCTSTR Key);
};

class CclsTickMarkArea : public COleDispatchDriver
{
// Constructors
public:
	CclsTickMarkArea() {}	
	CclsTickMarkArea(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTickMarkArea(const CclsTickMarkArea& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetHeight(LONG propval);
	LONG GetHeight();
	void SetBigTickMarkHeight(LONG propval);
	LONG GetBigTickMarkHeight();
	void SetMediumTickMarkHeight(LONG propval);
	LONG GetMediumTickMarkHeight();
	void SetSmallTickMarkHeight(LONG propval);
	LONG GetSmallTickMarkHeight();
	void SetVisible(BOOL propval);
	BOOL GetVisible();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	void SetTextOffset(LONG propval);
	LONG GetTextOffset();
	CclsTickMarks GetTickMarks();
	CclsStyle GetStyle();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsProgressLine : public COleDispatchDriver
{
// Constructors
public:
	CclsProgressLine() {}	
	CclsProgressLine(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsProgressLine(const CclsProgressLine& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetPosition(DATE propval);
	DATE GetPosition();
	void SetForeColor(unsigned long propval);
	unsigned long GetForeColor();
	void SetLength(E_PROGRESSLINELENGTH propval);
	E_PROGRESSLINELENGTH GetLength();
	void SetLineType(E_PROGRESSLINETYPE propval);
	E_PROGRESSLINETYPE GetLineType();
	void SetWidth(LONG propval);
	LONG GetWidth();
	void SetLineStyle(E_PROGRESSLINESTYLE propval);
	E_PROGRESSLINESTYLE GetLineStyle();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	void SetColor(LONG Index, unsigned long oColor);
	unsigned long GetColor(LONG Index);
};

class CclsTimeLine : public COleDispatchDriver
{
// Constructors
public:
	CclsTimeLine() {}	
	CclsTimeLine(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsTimeLine(const CclsTimeLine& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	void SetForeColor(unsigned long propval);
	unsigned long GetForeColor();
	DATE GetEndDate();
	DATE GetStartDate();
	LONG GetHeight();
	LONG GetTop();
	LONG GetBottom();
	CclsTimeLineScrollBar GetTimeLineScrollBar();
	CclsTierArea GetTierArea();
	CclsTickMarkArea GetTickMarkArea();
	CclsProgressLine GetProgressLine();

// Methods
public:
	void Move(E_INTERVAL Interval, LONG Factor);
	void Position(DATE TimeLineStartDate);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CclsView : public COleDispatchDriver
{
// Constructors
public:
	CclsView() {}	
	CclsView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsView(const CclsView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetKey(LPCTSTR propval);
	CString GetKey();
	CclsTimeLine GetTimeLine();
	CclsClientArea GetClientArea();
	void SetTag(LPCTSTR propval);
	CString GetTag();
	void SetInterval(E_INTERVAL propval);
	E_INTERVAL GetInterval();
	LONG GetIndex();
	void SetFactor(LONG propval);
	LONG GetFactor();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
	void Clear(void);
	CclsView Clone(LPCTSTR Key);
};

class CclsViews : public COleDispatchDriver
{
// Constructors
public:
	CclsViews() {}	
	CclsViews(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsViews(const CclsViews& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetCount();

// Methods
public:
	CclsView Item(LPCTSTR Index);
	CclsView Add(E_INTERVAL Interval, LONG Factor, E_TIERTYPE UpperTierType, E_TIERTYPE MiddleTierType, E_TIERTYPE LowerTierType, LPCTSTR Key);
	void Clear(void);
	void Remove(LPCTSTR Index);
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CCustomTierDrawEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CCustomTierDrawEventArgs() {}	
	CCustomTierDrawEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCustomTierDrawEventArgs(const CCustomTierDrawEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetText(LPCTSTR propval);
	CString GetText();
	void SetCustomDraw(BOOL propval);
	BOOL GetCustomDraw();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	void SetTierPosition(E_TIERPOSITION propval);
	E_TIERPOSITION GetTierPosition();
	void SetStartDate(DATE propval);
	DATE GetStartDate();
	void SetEndDate(DATE propval);
	DATE GetEndDate();
	void SetLeft(LONG propval);
	LONG GetLeft();
	void SetTop(LONG propval);
	LONG GetTop();
	void SetRight(LONG propval);
	LONG GetRight();
	void SetBottom(LONG propval);
	LONG GetBottom();
	void SetLeftTrim(LONG propval);
	LONG GetLeftTrim();
	void SetRightTrim(LONG propval);
	LONG GetRightTrim();
	CclsGDIGraphics GetGraphics();
	void SetInterval(E_INTERVAL propval);
	E_INTERVAL GetInterval();
	void SetFactor(LONG propval);
	LONG GetFactor();

// Methods
public:
};

class CDrawEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CDrawEventArgs() {}	
	CDrawEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CDrawEventArgs(const CDrawEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetEventTarget(E_EVENTTARGET propval);
	E_EVENTTARGET GetEventTarget();
	void SetCustomDraw(BOOL propval);
	BOOL GetCustomDraw();
	void SetObjectIndex(LONG propval);
	LONG GetObjectIndex();
	void SetParentObjectIndex(LONG propval);
	LONG GetParentObjectIndex();
	CclsGDIGraphics GetGraphics();

// Methods
public:
};

class CErrorEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CErrorEventArgs() {}	
	CErrorEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CErrorEventArgs(const CErrorEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetNumber(LONG propval);
	LONG GetNumber();
	void SetDescription(LPCTSTR propval);
	CString GetDescription();
	void SetSource(LPCTSTR propval);
	CString GetSource();

// Methods
public:
};

class CKeyEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CKeyEventArgs() {}	
	CKeyEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CKeyEventArgs(const CKeyEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetKeyCode(E_KEYS propval);
	E_KEYS GetKeyCode();
	void SetCancel(BOOL propval);
	BOOL GetCancel();
	void SetCharacterCode(SHORT propval);
	SHORT GetCharacterCode();
	BOOL GetAlt();
	BOOL GetShift();
	BOOL GetControl();

// Methods
public:
};

class CCustomTickMarkAreaDrawEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CCustomTickMarkAreaDrawEventArgs() {}	
	CCustomTickMarkAreaDrawEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCustomTickMarkAreaDrawEventArgs(const CCustomTickMarkAreaDrawEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetCustomDraw(BOOL propval);
	BOOL GetCustomDraw();
	CclsGDIGraphics GetGraphics();
	LONG GetLeft();
	LONG GetTop();
	LONG GetRight();
	LONG GetBottom();
	DATE GetdtDate();
	CclsTickMark GetoTickMark();
	LONG GetX();

// Methods
public:
};

class CTickMarkTextDrawEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CTickMarkTextDrawEventArgs() {}	
	CTickMarkTextDrawEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTickMarkTextDrawEventArgs(const CTickMarkTextDrawEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetCustomDraw(BOOL propval);
	BOOL GetCustomDraw();
	void SetText(LPCTSTR propval);
	CString GetText();
	DATE GetdtDate();

// Methods
public:
};

class CMouseEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CMouseEventArgs() {}	
	CMouseEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CMouseEventArgs(const CMouseEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetX(LONG propval);
	LONG GetX();
	void SetY(LONG propval);
	LONG GetY();
	void SetEventTarget(E_EVENTTARGET propval);
	E_EVENTTARGET GetEventTarget();
	void SetOperation(E_OPERATION propval);
	E_OPERATION GetOperation();
	void SetButton(E_MOUSEBUTTONS propval);
	E_MOUSEBUTTONS GetButton();
	void SetCancel(BOOL propval);
	BOOL GetCancel();

// Methods
public:
};

class CMouseWheelEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CMouseWheelEventArgs() {}	
	CMouseWheelEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CMouseWheelEventArgs(const CMouseWheelEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetX(LONG propval);
	LONG GetX();
	void SetY(LONG propval);
	LONG GetY();
	void SetButton(E_MOUSEBUTTONS propval);
	E_MOUSEBUTTONS GetButton();
	LONG GetDelta();

// Methods
public:
};

class CNodeEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CNodeEventArgs() {}	
	CNodeEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CNodeEventArgs(const CNodeEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetIndex(LONG propval);
	LONG GetIndex();

// Methods
public:
};

class CObjectAddedEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CObjectAddedEventArgs() {}	
	CObjectAddedEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CObjectAddedEventArgs(const CObjectAddedEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetTaskIndex(LONG propval);
	LONG GetTaskIndex();
	void SetPredecessorObjectIndex(LONG propval);
	LONG GetPredecessorObjectIndex();
	void SetPredecessorTaskIndex(LONG propval);
	LONG GetPredecessorTaskIndex();
	void SetPredecessorType(E_CONSTRAINTTYPE propval);
	E_CONSTRAINTTYPE GetPredecessorType();
	void SetTaskKey(LPCTSTR propval);
	CString GetTaskKey();
	void SetPredecessorTaskKey(LPCTSTR propval);
	CString GetPredecessorTaskKey();
	void SetEventTarget(E_EVENTTARGET propval);
	E_EVENTTARGET GetEventTarget();

// Methods
public:
};

class CObjectSelectedEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CObjectSelectedEventArgs() {}	
	CObjectSelectedEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CObjectSelectedEventArgs(const CObjectSelectedEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetEventTarget(E_EVENTTARGET propval);
	E_EVENTTARGET GetEventTarget();
	void SetObjectIndex(LONG propval);
	LONG GetObjectIndex();
	void SetParentObjectIndex(LONG propval);
	LONG GetParentObjectIndex();

// Methods
public:
};

class CObjectStateChangedEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CObjectStateChangedEventArgs() {}	
	CObjectStateChangedEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CObjectStateChangedEventArgs(const CObjectStateChangedEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetEventTarget(E_EVENTTARGET propval);
	E_EVENTTARGET GetEventTarget();
	void SetIndex(LONG propval);
	LONG GetIndex();
	void SetCancel(BOOL propval);
	BOOL GetCancel();
	void SetDestinationIndex(LONG propval);
	LONG GetDestinationIndex();
	void SetInitialRowIndex(LONG propval);
	LONG GetInitialRowIndex();
	void SetFinalRowIndex(LONG propval);
	LONG GetFinalRowIndex();
	void SetInitialColumnIndex(LONG propval);
	LONG GetInitialColumnIndex();
	void SetFinalColumnIndex(LONG propval);
	LONG GetFinalColumnIndex();
	DATE GetStartDate();
	DATE GetEndDate();
	E_CHANGETYPE GetChangeType();

// Methods
public:
};

class CPredecessorExceptionEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CPredecessorExceptionEventArgs() {}	
	CPredecessorExceptionEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CPredecessorExceptionEventArgs(const CPredecessorExceptionEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetPredecessorIndex(LONG propval);
	LONG GetPredecessorIndex();
	void SetPredecessorType(E_CONSTRAINTTYPE propval);
	E_CONSTRAINTTYPE GetPredecessorType();

// Methods
public:
};

class CPredecessorDrawEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CPredecessorDrawEventArgs() {}	
	CPredecessorDrawEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CPredecessorDrawEventArgs(const CPredecessorDrawEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetCustomDraw(BOOL propval);
	BOOL GetCustomDraw();
	CclsGDIGraphics GetGraphics();
	void SetPredecessorIndex(LONG propval);
	LONG GetPredecessorIndex();
	void SetTaskIndex(LONG propval);
	LONG GetTaskIndex();
	void SetPredecessorType(E_CONSTRAINTTYPE propval);
	E_CONSTRAINTTYPE GetPredecessorType();

// Methods
public:
};

class CScrollEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CScrollEventArgs() {}	
	CScrollEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CScrollEventArgs(const CScrollEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetScrollBarType(E_SCROLLBAR propval);
	E_SCROLLBAR GetScrollBarType();
	void SetOffset(LONG propval);
	LONG GetOffset();

// Methods
public:
};

class CTextEditEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CTextEditEventArgs() {}	
	CTextEditEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTextEditEventArgs(const CTextEditEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetObjectType(E_TEXTOBJECTTYPE propval);
	E_TEXTOBJECTTYPE GetObjectType();
	void SetObjectIndex(LONG propval);
	LONG GetObjectIndex();
	void SetParentObjectIndex(LONG propval);
	LONG GetParentObjectIndex();
	void SetText(LPCTSTR propval);
	CString GetText();

// Methods
public:
};

class CToolTipEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CToolTipEventArgs() {}	
	CToolTipEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CToolTipEventArgs(const CToolTipEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetInitialRowIndex(LONG propval);
	LONG GetInitialRowIndex();
	void SetFinalRowIndex(LONG propval);
	LONG GetFinalRowIndex();
	void SetTaskIndex(LONG propval);
	LONG GetTaskIndex();
	void SetMilestoneIndex(LONG propval);
	LONG GetMilestoneIndex();
	void SetPercentageIndex(LONG propval);
	LONG GetPercentageIndex();
	void SetRowIndex(LONG propval);
	LONG GetRowIndex();
	void SetCellIndex(LONG propval);
	LONG GetCellIndex();
	void SetColumnIndex(LONG propval);
	LONG GetColumnIndex();
	void SetInitialStartDate(DATE propval);
	DATE GetInitialStartDate();
	void SetInitialEndDate(DATE propval);
	DATE GetInitialEndDate();
	void SetStartDate(DATE propval);
	DATE GetStartDate();
	void SetEndDate(DATE propval);
	DATE GetEndDate();
	void SetXStart(LONG propval);
	LONG GetXStart();
	void SetXEnd(LONG propval);
	LONG GetXEnd();
	void SetOperation(E_OPERATION propval);
	E_OPERATION GetOperation();
	void SetEventTarget(E_EVENTTARGET propval);
	E_EVENTTARGET GetEventTarget();
	void SetTaskPosition(LPCTSTR propval);
	CString GetTaskPosition();
	void SetPredecessorPosition(LPCTSTR propval);
	CString GetPredecessorPosition();
	void SetX(LONG propval);
	LONG GetX();
	void SetY(LONG propval);
	LONG GetY();
	void SetX1(LONG propval);
	LONG GetX1();
	void SetY1(LONG propval);
	LONG GetY1();
	void SetX2(LONG propval);
	LONG GetX2();
	void SetY2(LONG propval);
	LONG GetY2();
	void SetCustomDraw(BOOL propval);
	BOOL GetCustomDraw();
	CclsGDIGraphics GetGraphics();
	void SetToolTipType(E_TOOLTIPTYPE propval);
	E_TOOLTIPTYPE GetToolTipType();

// Methods
public:
};

class CPagePrintEventArgs : public COleDispatchDriver
{
// Constructors
public:
	CPagePrintEventArgs() {}	
	CPagePrintEventArgs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CPagePrintEventArgs(const CPagePrintEventArgs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	LONG GetPageNumber();
	CclsGDIGraphics GetGraphics();
	LONG GetX1();
	LONG GetY1();
	LONG GetX2();
	LONG GetY2();
	LONG GetPageWidth();
	LONG GetPageHeight();
	LONG GetActualPageWidth();
	LONG GetActualPageHeight();

// Methods
public:
};

class CclsConfiguration : public COleDispatchDriver
{
// Constructors
public:
	CclsConfiguration() {}	
	CclsConfiguration(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CclsConfiguration(const CclsConfiguration& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetFirstDayOfWeek(E_WEEKDAY propval);
	E_WEEKDAY GetFirstDayOfWeek();
	void SetCalendarWeekRule(E_CALENDARWEEKRULES propval);
	E_CALENDARWEEKRULES GetCalendarWeekRule();
	void SetISO8601Weeks(BOOL propval);
	BOOL GetISO8601Weeks();
	void SetRowHighlightedBackColor(unsigned long propval);
	unsigned long GetRowHighlightedBackColor();
	void SetRowEvenBackColor(unsigned long propval);
	unsigned long GetRowEvenBackColor();
	void SetRowOddBackColor(unsigned long propval);
	unsigned long GetRowOddBackColor();
	void SetAlternatingRowStyles(BOOL propval);
	BOOL GetAlternatingRowStyles();
	CclsFont GetDefaultFont();
	CclsStyle GetDefaultControlStyle();
	CclsStyle GetDefaultTaskStyle();
	CclsStyle GetDefaultRowStyle();
	CclsStyle GetDefaultClientAreaStyle();
	CclsStyle GetDefaultCellStyle();
	CclsStyle GetDefaultColumnStyle();
	CclsStyle GetDefaultPercentageStyle();
	CclsStyle GetDefaultPredecessorStyle();
	CclsStyle GetDefaultTimeLineStyle();
	CclsStyle GetDefaultTimeBlockStyle();
	CclsStyle GetDefaultTickMarkAreaStyle();
	CclsStyle GetDefaultSplitterStyle();
	CclsStyle GetDefaultProgressLineStyle();
	CclsStyle GetDefaultNodeStyle();
	CclsStyle GetDefaultTierStyle();
	CclsStyle GetDefaultScrollBarStyle();
	CclsStyle GetDefaultSBSeparatorStyle();
	CclsStyle GetDefaultSBNormalStyle();
	CclsStyle GetDefaultSBPressedStyle();
	CclsStyle GetDefaultSBDisabledStyle();

// Methods
public:
	CString GetXML(void);
	void SetXML(LPCTSTR sXML);
};

class CControlTemplateGradient : public COleDispatchDriver
{
// Constructors
public:
	CControlTemplateGradient() {}	
	CControlTemplateGradient(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CControlTemplateGradient(const CControlTemplateGradient& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetControlBorderColor(unsigned long propval);
	unsigned long GetControlBorderColor();
	void SetHeadingBorderColor(unsigned long propval);
	unsigned long GetHeadingBorderColor();
	void SetHeadingForeColor(unsigned long propval);
	unsigned long GetHeadingForeColor();
	void SetRowForeColor(unsigned long propval);
	unsigned long GetRowForeColor();
	void SetGradientFillMode(GRE_GRADIENTFILLMODE propval);
	GRE_GRADIENTFILLMODE GetGradientFillMode();
	void SetStartGradientColor(unsigned long propval);
	unsigned long GetStartGradientColor();
	void SetEndGradientColor(unsigned long propval);
	unsigned long GetEndGradientColor();
	void SetTreeviewColor(unsigned long propval);
	unsigned long GetTreeviewColor();
	void SetRowBorderColor(unsigned long propval);
	unsigned long GetRowBorderColor();

// Methods
public:
};

class CControlTemplateSolid : public COleDispatchDriver
{
// Constructors
public:
	CControlTemplateSolid() {}	
	CControlTemplateSolid(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CControlTemplateSolid(const CControlTemplateSolid& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Properties
public:
	void SetControlBorderColor(unsigned long propval);
	unsigned long GetControlBorderColor();
	void SetHeadingBorderColor(unsigned long propval);
	unsigned long GetHeadingBorderColor();
	void SetHeadingForeColor(unsigned long propval);
	unsigned long GetHeadingForeColor();
	void SetRowForeColor(unsigned long propval);
	unsigned long GetRowForeColor();
	void SetHeadingBackColor(unsigned long propval);
	unsigned long GetHeadingBackColor();
	void SetTreeviewColor(unsigned long propval);
	unsigned long GetTreeviewColor();
	void SetRowBorderColor(unsigned long propval);
	unsigned long GetRowBorderColor();
	void SetTimeBlockBackColor(unsigned long propval);
	unsigned long GetTimeBlockBackColor();

// Methods
public:
};

class CActiveGanttVCCtl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CActiveGanttVCCtl)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid = { 0x688B95D3, 0xC09A, 0x4E7D, { 0x8F, 0x01, 0xF4, 0xBA, 0xC5, 0x9C, 0xCA, 0x18} };
		return clsid;
	}

	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID, CCreateContext* pContext = NULL)
	{
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID);
	}

	BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE, BSTR bstrLicKey = NULL)
	{
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID, pPersist, bStorage, bstrLicKey);
	}

// Properties
public:
	void SetErrorReports(E_REPORTERRORS propval);
	E_REPORTERRORS GetErrorReports();
	void SetCurrentLayer(LPCTSTR propval);
	CString GetCurrentLayer();
	void SetCurrentView(LPCTSTR propval);
	CString GetCurrentView();
	CclsView GetCurrentViewObject();
	CclsToolTip GetToolTip();
	void SetScrollBarBehaviour(E_SCROLLBEHAVIOUR propval);
	E_SCROLLBEHAVIOUR GetScrollBarBehaviour();
	void SetTimeBlockBehaviour(E_TIMEBLOCKBEHAVIOUR propval);
	E_TIMEBLOCKBEHAVIOUR GetTimeBlockBehaviour();
	void SetSelectedTaskIndex(LONG propval);
	LONG GetSelectedTaskIndex();
	void SetSelectedColumnIndex(LONG propval);
	LONG GetSelectedColumnIndex();
	void SetSelectedRowIndex(LONG propval);
	LONG GetSelectedRowIndex();
	void SetSelectedCellIndex(LONG propval);
	LONG GetSelectedCellIndex();
	void SetSelectedPercentageIndex(LONG propval);
	LONG GetSelectedPercentageIndex();
	void SetTreeviewColumnIndex(LONG propval);
	LONG GetTreeviewColumnIndex();
	CclsCultureInfo GetCulture();
	CString GetModuleCompletePath();
	CString GetVersion();
	void SetAllowSplitterMove(BOOL propval);
	BOOL GetAllowSplitterMove();
	void SetAllowPredecessorAdd(BOOL propval);
	BOOL GetAllowPredecessorAdd();
	void SetAllowAdd(BOOL propval);
	BOOL GetAllowAdd();
	void SetAllowEdit(BOOL propval);
	BOOL GetAllowEdit();
	void SetAllowColumnSize(BOOL propval);
	BOOL GetAllowColumnSize();
	void SetAllowColumnMove(BOOL propval);
	BOOL GetAllowColumnMove();
	void SetAllowRowSize(BOOL propval);
	BOOL GetAllowRowSize();
	void SetAllowRowMove(BOOL propval);
	BOOL GetAllowRowMove();
	void SetAllowTimeLineScroll(BOOL propval);
	BOOL GetAllowTimeLineScroll();
	void SetAddMode(E_ADDMODE propval);
	E_ADDMODE GetAddMode();
	void SetLayerEnableObjects(E_LAYEROBJECTENABLE propval);
	E_LAYEROBJECTENABLE GetLayerEnableObjects();
	void SetDoubleBuffering(BOOL propval);
	BOOL GetDoubleBuffering();
	void SetMinRowHeight(LONG propval);
	LONG GetMinRowHeight();
	void SetMinColumnWidth(LONG propval);
	LONG GetMinColumnWidth();
	CclsRows GetRows();
	CclsTasks GetTasks();
	CclsColumns GetColumns();
	CclsStyles GetStyles();
	CclsLayers GetLayers();
	CclsPercentages GetPercentages();
	CclsTimeBlocks GetTimeBlocks();
	CclsViews GetViews();
	CclsSplitter GetSplitter();
	CclsPrinter GetPrinter();
	CclsTreeview GetTreeview();
	CclsDrawing GetDrawing();
	CclsMath GetMathLib();
	CclsVerticalScrollBar GetVerticalScrollBar();
	CclsHorizontalScrollBar GetHorizontalScrollBar();
	CToolTipEventArgs GetToolTipEventArgs();
	CObjectAddedEventArgs GetObjectAddedEventArgs();
	CCustomTierDrawEventArgs GetCustomTierDrawEventArgs();
	CMouseEventArgs GetMouseEventArgs();
	CKeyEventArgs GetKeyEventArgs();
	CScrollEventArgs GetScrollEventArgs();
	CDrawEventArgs GetDrawEventArgs();
	CPredecessorDrawEventArgs GetPredecessorDrawEventArgs();
	CObjectSelectedEventArgs GetObjectSelectedEventArgs();
	CObjectStateChangedEventArgs GetObjectStateChangedEventArgs();
	CErrorEventArgs GetErrorEventArgs();
	CNodeEventArgs GetNodeEventArgs();
	void SetControlTag(LPCTSTR propval);
	CString GetControlTag();
	LPDISPATCH GetGetIDispatch();
	CMouseWheelEventArgs GetMouseWheelEventArgs();
	CclsTierAppearance GetTierAppearance();
	CclsTierFormat GetTierFormat();
	void SetTierAppearanceScope(E_OBJECTSCOPE propval);
	E_OBJECTSCOPE GetTierAppearanceScope();
	void SetTierFormatScope(E_OBJECTSCOPE propval);
	E_OBJECTSCOPE GetTierFormatScope();
	void SetStyleIndex(LPCTSTR propval);
	CString GetStyleIndex();
	CclsStyle GetStyle();
	CclsImage GetImage();
	void SetImageTag(LPCTSTR propval);
	CString GetImageTag();
	CclsScrollBarSeparator GetScrollBarSeparator();
	CTextEditEventArgs GetTextEditEventArgs();
	CclsPredecessors GetPredecessors();
	CPredecessorExceptionEventArgs GetPredecessorExceptionEventArgs();
	void SetSelectedPredecessorIndex(LONG propval);
	LONG GetSelectedPredecessorIndex();
	void SetEnforcePredecessors(BOOL propval);
	BOOL GetEnforcePredecessors();
	void SetPredecessorMode(E_PREDECESSORMODE propval);
	E_PREDECESSORMODE GetPredecessorMode();
	void SetAddDurationInterval(E_INTERVAL propval);
	E_INTERVAL GetAddDurationInterval();
	CclsTimeLineScrollBar GetTimeLineScrollBar();
	CclsProgressLine GetProgressLine();
	void SetTimeLineScrollBarScope(E_OBJECTSCOPE propval);
	E_OBJECTSCOPE GetTimeLineScrollBarScope();
	void SetProgressLineScope(E_OBJECTSCOPE propval);
	E_OBJECTSCOPE GetProgressLineScope();
	CclsConfiguration GetConfiguration();
	E_CONTROLTEMPLATE GetControlTemplate();
	E_OBJECTTEMPLATE GetObjectTemplate();
	CString GetPrinterErrorMessage();

// Methods
public:
	void WriteXML(LPCTSTR url);
	void ReadXML(LPCTSTR url);
	void SetXML(LPCTSTR sXML);
	CString GetXML(void);
	void ClearSelections(void);
	void Clear(void);
	void SaveToImage(LPCTSTR Path, GRE_IMAGEFORMAT Format);
	void AboutBox(void);
	void Redraw(void);
	void ForceEndTextEdit(void);
	void CheckPredecessors(void);
	void ApplyTemplateSolid(LPDISPATCH ControlTemplate, E_OBJECTTEMPLATE ObjectTemplate);
	void ApplyTemplateGradient(LPDISPATCH ControlTemplate, E_OBJECTTEMPLATE ObjectTemplate);
	void ApplyTemplate(E_CONTROLTEMPLATE ControlTemplate, E_OBJECTTEMPLATE ObjectTemplate);
};
}